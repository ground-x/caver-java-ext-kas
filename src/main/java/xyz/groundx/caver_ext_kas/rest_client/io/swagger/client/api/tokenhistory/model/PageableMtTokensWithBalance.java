/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.MtToken;
/**
 * PageableMtTokensWithBalance
 */


public class PageableMtTokensWithBalance {
  @SerializedName("items")
  private List<MtToken> items = new ArrayList<MtToken>();

  @SerializedName("totalBalance")
  private String totalBalance = null;

  @SerializedName("cursor")
  private String cursor = null;

  public PageableMtTokensWithBalance items(List<MtToken> items) {
    this.items = items;
    return this;
  }

  public PageableMtTokensWithBalance addItemsItem(MtToken itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @Schema(required = true, description = "")
  public List<MtToken> getItems() {
    return items;
  }

  public void setItems(List<MtToken> items) {
    this.items = items;
  }

  public PageableMtTokensWithBalance totalBalance(String totalBalance) {
    this.totalBalance = totalBalance;
    return this;
  }

   /**
   * Total balance of tokens by EOA
   * @return totalBalance
  **/
  @Schema(example = "0xf1", required = true, description = "Total balance of tokens by EOA")
  public String getTotalBalance() {
    return totalBalance;
  }

  public void setTotalBalance(String totalBalance) {
    this.totalBalance = totalBalance;
  }

  public PageableMtTokensWithBalance cursor(String cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Next page cursor
   * @return cursor
  **/
  @Schema(example = "z2o87adeLbW4Aqm53gpq6VbGZg3JmE5vodrwD9XKmY5vMl4Gkw9PZO1NoBpV8LR83y0Edb3Aar7eKQqzJWDg6X2xOe1P27l4kzY0xQa8LNABMWv0VJQ6MpNlr9O1xBDE", required = true, description = "Next page cursor")
  public String getCursor() {
    return cursor;
  }

  public void setCursor(String cursor) {
    this.cursor = cursor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageableMtTokensWithBalance pageableMtTokensWithBalance = (PageableMtTokensWithBalance) o;
    return Objects.equals(this.items, pageableMtTokensWithBalance.items) &&
        Objects.equals(this.totalBalance, pageableMtTokensWithBalance.totalBalance) &&
        Objects.equals(this.cursor, pageableMtTokensWithBalance.cursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, totalBalance, cursor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageableMtTokensWithBalance {\n");
    
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    totalBalance: ").append(toIndentedString(totalBalance)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
