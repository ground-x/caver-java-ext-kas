/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.MtContract;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.Transaction;
/**
 * MtTransfer
 */


public class MtTransfer implements AnyOfTransferArrayItems {
  @SerializedName("contract")
  private MtContract contract = null;

  @SerializedName("operator")
  private String operator = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("transaction")
  private Transaction transaction = null;

  @SerializedName("transferType")
  private String transferType = null;

  @SerializedName("ids")
  private List<String> ids = new ArrayList<String>();

  @SerializedName("values")
  private List<String> values = new ArrayList<String>();

  public MtTransfer contract(MtContract contract) {
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @Schema(required = true, description = "")
  public MtContract getContract() {
    return contract;
  }

  public void setContract(MtContract contract) {
    this.contract = contract;
  }

  public MtTransfer operator(String operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Validator EOA (20-byte)
   * @return operator
  **/
  @Schema(example = "0x5e47b195eeb11d72f5e1d27aebb6d341f1a9bedb", required = true, description = "Validator EOA (20-byte)")
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }

  public MtTransfer from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Sender EOA (20-byte)
   * @return from
  **/
  @Schema(example = "0x5e47b195eeb11d72f5e1d27aebb6d341f1a9bedb", required = true, description = "Sender EOA (20-byte)")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public MtTransfer to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Receiver EOA (20-byte)
   * @return to
  **/
  @Schema(example = "0xb4bf60383c64d47f2e667f2fe8f7ed0c9380f770", required = true, description = "Receiver EOA (20-byte)")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public MtTransfer transaction(Transaction transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @Schema(required = true, description = "")
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }

  public MtTransfer transferType(String transferType) {
    this.transferType = transferType;
    return this;
  }

   /**
   * Transaction type
   * @return transferType
  **/
  @Schema(example = "mt", required = true, description = "Transaction type")
  public String getTransferType() {
    return transferType;
  }

  public void setTransferType(String transferType) {
    this.transferType = transferType;
  }

  public MtTransfer ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public MtTransfer addIdsItem(String idsItem) {
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Array of token identifiers (in hexadecimal)
   * @return ids
  **/
  @Schema(example = "[0x1,0x2]", required = true, description = "Array of token identifiers (in hexadecimal)")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public MtTransfer values(List<String> values) {
    this.values = values;
    return this;
  }

  public MtTransfer addValuesItem(String valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Array of sent tokens (in hexadecimal)
   * @return values
  **/
  @Schema(example = "[0xa,0xb]", required = true, description = "Array of sent tokens (in hexadecimal)")
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MtTransfer mtTransfer = (MtTransfer) o;
    return Objects.equals(this.contract, mtTransfer.contract) &&
        Objects.equals(this.operator, mtTransfer.operator) &&
        Objects.equals(this.from, mtTransfer.from) &&
        Objects.equals(this.to, mtTransfer.to) &&
        Objects.equals(this.transaction, mtTransfer.transaction) &&
        Objects.equals(this.transferType, mtTransfer.transferType) &&
        Objects.equals(this.ids, mtTransfer.ids) &&
        Objects.equals(this.values, mtTransfer.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contract, operator, from, to, transaction, transferType, ids, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MtTransfer {\n");
    
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
