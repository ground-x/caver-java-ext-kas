/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MtToken
 */


public class MtToken {
  @SerializedName("tokenId")
  private String tokenId = null;

  @SerializedName("owner")
  private String owner = null;

  @SerializedName("tokenAddress")
  private String tokenAddress = null;

  @SerializedName("totalSupply")
  private String totalSupply = null;

  @SerializedName("tokenUri")
  private String tokenUri = null;

  @SerializedName("balance")
  private String balance = null;

  @SerializedName("transactionHash")
  private String transactionHash = null;

  @SerializedName("transferFrom")
  private String transferFrom = null;

  @SerializedName("transferTo")
  private String transferTo = null;

  @SerializedName("updatedAt")
  private Long updatedAt = null;

  public MtToken tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Token ID (in hexadecimal)
   * @return tokenId
  **/
  @Schema(example = "1", required = true, description = "Token ID (in hexadecimal)")
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }

  public MtToken owner(String owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Owner EOA (20-byte)
   * @return owner
  **/
  @Schema(example = "538243955260495079143208573429421427237585534683", required = true, description = "Owner EOA (20-byte)")
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public MtToken tokenAddress(String tokenAddress) {
    this.tokenAddress = tokenAddress;
    return this;
  }

   /**
   * CA (20-byte)
   * @return tokenAddress
  **/
  @Schema(example = "251987508837296013569320541070808745076556543246", required = true, description = "CA (20-byte)")
  public String getTokenAddress() {
    return tokenAddress;
  }

  public void setTokenAddress(String tokenAddress) {
    this.tokenAddress = tokenAddress;
  }

  public MtToken totalSupply(String totalSupply) {
    this.totalSupply = totalSupply;
    return this;
  }

   /**
   * Total issued amount (in hexadecimal)
   * @return totalSupply
  **/
  @Schema(example = "3552713678800500929355621337890625", required = true, description = "Total issued amount (in hexadecimal)")
  public String getTotalSupply() {
    return totalSupply;
  }

  public void setTotalSupply(String totalSupply) {
    this.totalSupply = totalSupply;
  }

  public MtToken tokenUri(String tokenUri) {
    this.tokenUri = tokenUri;
    return this;
  }

   /**
   * Token URL
   * @return tokenUri
  **/
  @Schema(example = "https://link.to/mt/1", required = true, description = "Token URL")
  public String getTokenUri() {
    return tokenUri;
  }

  public void setTokenUri(String tokenUri) {
    this.tokenUri = tokenUri;
  }

  public MtToken balance(String balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Owner&#x27;s balances in EOA
   * @return balance
  **/
  @Schema(example = "222044604925031308084726333618164", required = true, description = "Owner's balances in EOA")
  public String getBalance() {
    return balance;
  }

  public void setBalance(String balance) {
    this.balance = balance;
  }

  public MtToken transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Last transaction hash (32-byte)
   * @return transactionHash
  **/
  @Schema(example = "88941640552803633154072611475047379401865108829661485995735632343373081359608", required = true, description = "Last transaction hash (32-byte)")
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }

  public MtToken transferFrom(String transferFrom) {
    this.transferFrom = transferFrom;
    return this;
  }

   /**
   * Sender EOA of last TransferSingle or TransferBatch (20-byte)
   * @return transferFrom
  **/
  @Schema(example = "538243955260495079143208573429421427237585534683", required = true, description = "Sender EOA of last TransferSingle or TransferBatch (20-byte)")
  public String getTransferFrom() {
    return transferFrom;
  }

  public void setTransferFrom(String transferFrom) {
    this.transferFrom = transferFrom;
  }

  public MtToken transferTo(String transferTo) {
    this.transferTo = transferTo;
    return this;
  }

   /**
   * Receiver EOA of recent TransferSingle or TransferBatch (20-byte)
   * @return transferTo
  **/
  @Schema(example = "1084767800437542748145381337441068992140348071576", required = true, description = "Receiver EOA of recent TransferSingle or TransferBatch (20-byte)")
  public String getTransferTo() {
    return transferTo;
  }

  public void setTransferTo(String transferTo) {
    this.transferTo = transferTo;
  }

  public MtToken updatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last change in token information (timestamp)
   * @return updatedAt
  **/
  @Schema(example = "1592180992", required = true, description = "Last change in token information (timestamp)")
  public Long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MtToken mtToken = (MtToken) o;
    return Objects.equals(this.tokenId, mtToken.tokenId) &&
        Objects.equals(this.owner, mtToken.owner) &&
        Objects.equals(this.tokenAddress, mtToken.tokenAddress) &&
        Objects.equals(this.totalSupply, mtToken.totalSupply) &&
        Objects.equals(this.tokenUri, mtToken.tokenUri) &&
        Objects.equals(this.balance, mtToken.balance) &&
        Objects.equals(this.transactionHash, mtToken.transactionHash) &&
        Objects.equals(this.transferFrom, mtToken.transferFrom) &&
        Objects.equals(this.transferTo, mtToken.transferTo) &&
        Objects.equals(this.updatedAt, mtToken.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenId, owner, tokenAddress, totalSupply, tokenUri, balance, transactionHash, transferFrom, transferTo, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MtToken {\n");
    
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    tokenAddress: ").append(toIndentedString(tokenAddress)).append("\n");
    sb.append("    totalSupply: ").append(toIndentedString(totalSupply)).append("\n");
    sb.append("    tokenUri: ").append(toIndentedString(tokenUri)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    transferFrom: ").append(toIndentedString(transferFrom)).append("\n");
    sb.append("    transferTo: ").append(toIndentedString(transferTo)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
