/*
 * Anchor API
 * # Introduction This document describes KAS (Klaytn API Service) Anchor API. Anchor API provides features sending metadata available to verify data reliability to ensure the reliability of service chain data to Klaytn main chain.  For more details on using the Anchor API, please refer to [Tutorial](https://docs.klaytnapi.com/tutorial/anchor-api).    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Anchoring transaction information
 */
@Schema(description = "Anchoring transaction information")

public class AnchorTransaction {
  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("payloadId")
  private String payloadId = null;

  @SerializedName("transactionHash")
  private String transactionHash = null;

  public AnchorTransaction createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The time at which anchoring transaction was created
   * @return createdAt
  **/
  @Schema(example = "1616141940", required = true, description = "The time at which anchoring transaction was created")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public AnchorTransaction payloadId(String payloadId) {
    this.payloadId = payloadId;
    return this;
  }

   /**
   * Payload ID
   * @return payloadId
  **/
  @Schema(example = "abc-abc-abc", required = true, description = "Payload ID")
  public String getPayloadId() {
    return payloadId;
  }

  public void setPayloadId(String payloadId) {
    this.payloadId = payloadId;
  }

  public AnchorTransaction transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Transaction hash of anchoring transactions
   * @return transactionHash
  **/
  @Schema(example = "0x9cfb36bda81d84d4b508a0f591835c2e2f0adc9b461ad49e27a32f6078726c41", required = true, description = "Transaction hash of anchoring transactions")
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnchorTransaction anchorTransaction = (AnchorTransaction) o;
    return Objects.equals(this.createdAt, anchorTransaction.createdAt) &&
        Objects.equals(this.payloadId, anchorTransaction.payloadId) &&
        Objects.equals(this.transactionHash, anchorTransaction.transactionHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, payloadId, transactionHash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnchorTransaction {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    payloadId: ").append(toIndentedString(payloadId)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
