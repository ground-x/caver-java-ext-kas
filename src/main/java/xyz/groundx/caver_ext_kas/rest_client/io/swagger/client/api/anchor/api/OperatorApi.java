/*
 * Anchor API
 * # Introduction This document describes KAS (Klaytn API Service) Anchor API. Anchor API provides features sending metadata available to verify data reliability to ensure the reliability of service chain data to Klaytn main chain.  For more details on using the Anchor API, please refer to [Tutorial](https://docs.klaytnapi.com/tutorial/anchor-api).    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.Operator;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.anchor.model.Operators;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperatorApi {
    private ApiClient apiClient;

    public OperatorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperatorApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getOperator
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param operatorId Operator account address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOperatorCall(String xChainId, String operatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/operator/{operator-id}"
            .replaceAll("\\{" + "operator-id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOperatorValidateBeforeCall(String xChainId, String operatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getOperator(Async)");
        }
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling getOperator(Async)");
        }
        
        com.squareup.okhttp.Call call = getOperatorCall(xChainId, operatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the specific operator
     * Retrieve the operator settings and a balance of the operator account.
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param operatorId Operator account address (required)
     * @return Operator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Operator getOperator(String xChainId, String operatorId) throws ApiException {
        ApiResponse<Operator> resp = getOperatorWithHttpInfo(xChainId, operatorId);
        return resp.getData();
    }

    /**
     * Retrieve the specific operator
     * Retrieve the operator settings and a balance of the operator account.
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param operatorId Operator account address (required)
     * @return ApiResponse&lt;Operator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Operator> getOperatorWithHttpInfo(String xChainId, String operatorId) throws ApiException {
        com.squareup.okhttp.Call call = getOperatorValidateBeforeCall(xChainId, operatorId, null, null);
        Type localVarReturnType = new TypeToken<Operator>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the specific operator (asynchronously)
     * Retrieve the operator settings and a balance of the operator account.
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param operatorId Operator account address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOperatorAsync(String xChainId, String operatorId, final ApiCallback<Operator> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOperatorValidateBeforeCall(xChainId, operatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Operator>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveOperators
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param size Maximum size to be queried (optional, default to 100)
     * @param cursor Information on the last cursor (optional)
     * @param fromTimestamp Starting point of the time range to be queried (timestamp in seconds) (optional)
     * @param toTimestamp Limit of the time range to be queried (timestamp in seconds) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveOperatorsCall(String xChainId, Long size, String cursor, Long fromTimestamp, Long toTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/operator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (fromTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-timestamp", fromTimestamp));
        if (toTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-timestamp", toTimestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveOperatorsValidateBeforeCall(String xChainId, Long size, String cursor, Long fromTimestamp, Long toTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling retrieveOperators(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveOperatorsCall(xChainId, size, cursor, fromTimestamp, toTimestamp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a list of all operators
     * Retrieve the list of operators created and the setting values of each operator.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value<br>
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param size Maximum size to be queried (optional, default to 100)
     * @param cursor Information on the last cursor (optional)
     * @param fromTimestamp Starting point of the time range to be queried (timestamp in seconds) (optional)
     * @param toTimestamp Limit of the time range to be queried (timestamp in seconds) (optional)
     * @return Operators
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Operators retrieveOperators(String xChainId, Long size, String cursor, Long fromTimestamp, Long toTimestamp) throws ApiException {
        ApiResponse<Operators> resp = retrieveOperatorsWithHttpInfo(xChainId, size, cursor, fromTimestamp, toTimestamp);
        return resp.getData();
    }

    /**
     * Retrieve a list of all operators
     * Retrieve the list of operators created and the setting values of each operator.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value<br>
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param size Maximum size to be queried (optional, default to 100)
     * @param cursor Information on the last cursor (optional)
     * @param fromTimestamp Starting point of the time range to be queried (timestamp in seconds) (optional)
     * @param toTimestamp Limit of the time range to be queried (timestamp in seconds) (optional)
     * @return ApiResponse&lt;Operators&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Operators> retrieveOperatorsWithHttpInfo(String xChainId, Long size, String cursor, Long fromTimestamp, Long toTimestamp) throws ApiException {
        com.squareup.okhttp.Call call = retrieveOperatorsValidateBeforeCall(xChainId, size, cursor, fromTimestamp, toTimestamp, null, null);
        Type localVarReturnType = new TypeToken<Operators>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of all operators (asynchronously)
     * Retrieve the list of operators created and the setting values of each operator.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value<br>
     * @param xChainId Klaytn Chain Network ID (1001 or 8217) (required)
     * @param size Maximum size to be queried (optional, default to 100)
     * @param cursor Information on the last cursor (optional)
     * @param fromTimestamp Starting point of the time range to be queried (timestamp in seconds) (optional)
     * @param toTimestamp Limit of the time range to be queried (timestamp in seconds) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveOperatorsAsync(String xChainId, Long size, String cursor, Long fromTimestamp, Long toTimestamp, final ApiCallback<Operators> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveOperatorsValidateBeforeCall(xChainId, size, cursor, fromTimestamp, toTimestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Operators>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
