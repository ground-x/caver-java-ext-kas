/*
 * KIP-7 API
 * # Introduction The KIP-17 API helps BApp (Blockchain Application) developers to manage contracts and tokens created in accordance with the [KIP-7](https://docs.klaytnapi.com/v/en/api#kip-7-api) standard, which is Klaytn's technical speficication for Fungible Tokens.  The functionality of the multiple endpoints enables you to do the following actions: - deploy smart contracts - manage the entire life cycle of an FT from minting, to sending and burning - get contract or token data - authorize a third party to execute token transfers - send tokens on behalf of the owner   For more details on KAS, please refer to [KAS Docs](https://docs.klaytnapi.com/). If you have any questions or comments, please leave them in the [Klaytn Developers Forum](http://forum.klaytn.com).    **alias**  When a method of the KIP-17 API requires a contract address, you can use the contract **alias**. You can give the contract an alias when deploying, and use it in place of the complicated address.  **deployer**  When you create a contract, you will be assigned one `deployer` address per Credential, which is the account address used for managing contracts. In KIP-7 API, this address is used in many different token-related operations. You can find the `deployer` address with [KIP7Deployer](#operation/GetDefaultDeployer).  Even with contracts created using SDKs like \"caver\", you can still use the contract address and [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) account to manage your contracts and tokens.  # Fee Payer Options  KAS KIP-17 supports four ways to pay the transaction fees.<br />  **1. Only using KAS Global FeePayer Account** <br /> Sends all transactions using KAS Global FeePayer Account. ``` {     \"options\": {       \"enableGlobalFeePayer\": true     } } ```  <br />  **2. Using User FeePayer Account** <br /> Sends all transactions using User FeePayer Account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```  <br />  **3. Using both KAS Global FeePayer Account + User FeePayer Account** <br /> Sends transactions using User FeePayer Account by default, and switches to the KAS Global FeePayer Account when balances are insufficient. ``` {   \"options\": {     \"enableGlobalFeePayer\": true,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```  <br />  **4. Not using FeePayer Account** <br /> Sends transactions the default way, paying the transaction fee from the user's account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false   } } ```  # Error Code This section contains the errors that might occur when using the KIP-17 API. KAS uses HTTP status codes. More details can be found in this [link](https://developer.mozilla.org/en/docs/Web/HTTP/Status). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.AddMinterKip7Request;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.ApproveKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.BurnFromKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.BurnKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7TokenBalanceResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7TransactionStatusResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.MintKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.TransferKip7TokenFromRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.TransferKip7TokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Kip7TokenApi {
    private ApiClient apiClient;

    public Kip7TokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Kip7TokenApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMinter
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMinterCall(String xChainId, String contractAddressOrAlias, AddMinterKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/minter"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMinterValidateBeforeCall(String xChainId, String contractAddressOrAlias, AddMinterKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling addMinter(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling addMinter(Async)");
        }
        
        com.squareup.okhttp.Call call = addMinterCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Minter
     * Grants a specified account the authority to mint and burn tokens from a contract. You can remove the authority by using [Remove Minter](#operation/RenounceMinter).  &gt; **NOTE**  &gt; &gt; &#x60;minter&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Remove Minter](#operation/RenounceMinter). Otherwise, you have to sign and send the transaction yourself.  ##### Sender The account that sends the transaction to grant the authority for tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse addMinter(String xChainId, String contractAddressOrAlias, AddMinterKip7Request body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = addMinterWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Add Minter
     * Grants a specified account the authority to mint and burn tokens from a contract. You can remove the authority by using [Remove Minter](#operation/RenounceMinter).  &gt; **NOTE**  &gt; &gt; &#x60;minter&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Remove Minter](#operation/RenounceMinter). Otherwise, you have to sign and send the transaction yourself.  ##### Sender The account that sends the transaction to grant the authority for tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> addMinterWithHttpInfo(String xChainId, String contractAddressOrAlias, AddMinterKip7Request body) throws ApiException {
        com.squareup.okhttp.Call call = addMinterValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Minter (asynchronously)
     * Grants a specified account the authority to mint and burn tokens from a contract. You can remove the authority by using [Remove Minter](#operation/RenounceMinter).  &gt; **NOTE**  &gt; &gt; &#x60;minter&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Remove Minter](#operation/RenounceMinter). Otherwise, you have to sign and send the transaction yourself.  ##### Sender The account that sends the transaction to grant the authority for tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMinterAsync(String xChainId, String contractAddressOrAlias, AddMinterKip7Request body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMinterValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for approveToken
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveTokenCall(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/approve"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling approveToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling approveToken(Async)");
        }
        
        com.squareup.okhttp.Call call = approveTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Authorize to Send Token
     * Grants authority to &#x60;spender&#x60; to send a certain amount of tokens from the &#x60;owner&#x60;&#x27;s account.  To send the token as an authorized &#x60;spender&#x60;, use [Send Token on Behalf of Owner](#operation/TransferFromToken).&lt;p&gt;&lt;/p&gt;  &gt; **NOTE**  &gt; &gt; &#x60;spender&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Send Token on Behalf of Owner](#operation/TransferFromToken).  ##### Owner The account that owns the token, and grants authority to &#x60;spender&#x60;. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;owner&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse approveToken(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = approveTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Authorize to Send Token
     * Grants authority to &#x60;spender&#x60; to send a certain amount of tokens from the &#x60;owner&#x60;&#x27;s account.  To send the token as an authorized &#x60;spender&#x60;, use [Send Token on Behalf of Owner](#operation/TransferFromToken).&lt;p&gt;&lt;/p&gt;  &gt; **NOTE**  &gt; &gt; &#x60;spender&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Send Token on Behalf of Owner](#operation/TransferFromToken).  ##### Owner The account that owns the token, and grants authority to &#x60;spender&#x60;. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;owner&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> approveTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Authorize to Send Token (asynchronously)
     * Grants authority to &#x60;spender&#x60; to send a certain amount of tokens from the &#x60;owner&#x60;&#x27;s account.  To send the token as an authorized &#x60;spender&#x60;, use [Send Token on Behalf of Owner](#operation/TransferFromToken).&lt;p&gt;&lt;/p&gt;  &gt; **NOTE**  &gt; &gt; &#x60;spender&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Send Token on Behalf of Owner](#operation/TransferFromToken).  ##### Owner The account that owns the token, and grants authority to &#x60;spender&#x60;. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;owner&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveTokenAsync(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for burnFromToken
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call burnFromTokenCall(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/burn-from"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call burnFromTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling burnFromToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling burnFromToken(Async)");
        }
        
        com.squareup.okhttp.Call call = burnFromTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Burn Authorized Tokens
     * Burns the tokens from the amount that the &#x60;spender&#x60; is authorized to send, as specified by the &#x60;owner&#x60;. The remaining balance of the tokens that the &#x60;sender&#x60; is allowed to send can be found via [Get Token Balance](#operation/GetTokenBalance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that sends the transaction.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse burnFromToken(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = burnFromTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Burn Authorized Tokens
     * Burns the tokens from the amount that the &#x60;spender&#x60; is authorized to send, as specified by the &#x60;owner&#x60;. The remaining balance of the tokens that the &#x60;sender&#x60; is allowed to send can be found via [Get Token Balance](#operation/GetTokenBalance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that sends the transaction.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> burnFromTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = burnFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Burn Authorized Tokens (asynchronously)
     * Burns the tokens from the amount that the &#x60;spender&#x60; is authorized to send, as specified by the &#x60;owner&#x60;. The remaining balance of the tokens that the &#x60;sender&#x60; is allowed to send can be found via [Get Token Balance](#operation/GetTokenBalance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that sends the transaction.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call burnFromTokenAsync(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = burnFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for burnToken
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call burnTokenCall(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/burn"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call burnTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling burnToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling burnToken(Async)");
        }
        
        com.squareup.okhttp.Call call = burnTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Burn Token
     * Burns tokens. The contract&#x27;s &#x60;totalSupply&#x60; will be reduced accordingly. You can find the &#x60;totalSupply&#x60; by using [Get Contract](#operation/GetContract). &lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction to burn tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse burnToken(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = burnTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Burn Token
     * Burns tokens. The contract&#x27;s &#x60;totalSupply&#x60; will be reduced accordingly. You can find the &#x60;totalSupply&#x60; by using [Get Contract](#operation/GetContract). &lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction to burn tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> burnTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Burn Token (asynchronously)
     * Burns tokens. The contract&#x27;s &#x60;totalSupply&#x60; will be reduced accordingly. You can find the &#x60;totalSupply&#x60; by using [Get Contract](#operation/GetContract). &lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction to burn tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call burnTokenAsync(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTokenAllowance
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address of the token&#x27;s owner. (required)
     * @param spender The Klaytn account address granted the authority to send the tokens.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenAllowanceCall(String xChainId, String contractAddressOrAlias, String owner, String spender, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/account/{owner}/allowance/{spender}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "spender" + "\\}", apiClient.escapeString(spender.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenAllowanceValidateBeforeCall(String xChainId, String contractAddressOrAlias, String owner, String spender, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTokenAllowance(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getTokenAllowance(Async)");
        }
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTokenAllowance(Async)");
        }
        // verify the required parameter 'spender' is set
        if (spender == null) {
            throw new ApiException("Missing the required parameter 'spender' when calling getTokenAllowance(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenAllowanceCall(xChainId, contractAddressOrAlias, owner, spender, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Approved Balance
     * Returns the remaining balance of the tokens that the &#x60;owner&#x60; authorized the &#x60;spender&#x60; to send.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address of the token&#x27;s owner. (required)
     * @param spender The Klaytn account address granted the authority to send the tokens.  (required)
     * @return Kip7TokenBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TokenBalanceResponse getTokenAllowance(String xChainId, String contractAddressOrAlias, String owner, String spender) throws ApiException {
        ApiResponse<Kip7TokenBalanceResponse> resp = getTokenAllowanceWithHttpInfo(xChainId, contractAddressOrAlias, owner, spender);
        return resp.getData();
    }

    /**
     * Get Approved Balance
     * Returns the remaining balance of the tokens that the &#x60;owner&#x60; authorized the &#x60;spender&#x60; to send.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address of the token&#x27;s owner. (required)
     * @param spender The Klaytn account address granted the authority to send the tokens.  (required)
     * @return ApiResponse&lt;Kip7TokenBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TokenBalanceResponse> getTokenAllowanceWithHttpInfo(String xChainId, String contractAddressOrAlias, String owner, String spender) throws ApiException {
        com.squareup.okhttp.Call call = getTokenAllowanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, spender, null, null);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Approved Balance (asynchronously)
     * Returns the remaining balance of the tokens that the &#x60;owner&#x60; authorized the &#x60;spender&#x60; to send.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address of the token&#x27;s owner. (required)
     * @param spender The Klaytn account address granted the authority to send the tokens.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenAllowanceAsync(String xChainId, String contractAddressOrAlias, String owner, String spender, final ApiCallback<Kip7TokenBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenAllowanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, spender, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTokenBalance
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address whose balance is requested. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenBalanceCall(String xChainId, String contractAddressOrAlias, String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/account/{owner}/balance"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenBalanceValidateBeforeCall(String xChainId, String contractAddressOrAlias, String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTokenBalance(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getTokenBalance(Async)");
        }
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTokenBalance(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenBalanceCall(xChainId, contractAddressOrAlias, owner, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Token Balance
     * \&quot;Returns the &#x60;owner&#x60;&#x27;s balance of the tokens from a specified  KIP-7 contract. &lt;p&gt;&lt;/p&gt;  \\n\&quot;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address whose balance is requested. (required)
     * @return Kip7TokenBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TokenBalanceResponse getTokenBalance(String xChainId, String contractAddressOrAlias, String owner) throws ApiException {
        ApiResponse<Kip7TokenBalanceResponse> resp = getTokenBalanceWithHttpInfo(xChainId, contractAddressOrAlias, owner);
        return resp.getData();
    }

    /**
     * Get Token Balance
     * \&quot;Returns the &#x60;owner&#x60;&#x27;s balance of the tokens from a specified  KIP-7 contract. &lt;p&gt;&lt;/p&gt;  \\n\&quot;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address whose balance is requested. (required)
     * @return ApiResponse&lt;Kip7TokenBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TokenBalanceResponse> getTokenBalanceWithHttpInfo(String xChainId, String contractAddressOrAlias, String owner) throws ApiException {
        com.squareup.okhttp.Call call = getTokenBalanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, null, null);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Token Balance (asynchronously)
     * \&quot;Returns the &#x60;owner&#x60;&#x27;s balance of the tokens from a specified  KIP-7 contract. &lt;p&gt;&lt;/p&gt;  \\n\&quot;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param owner The Klaytn account address whose balance is requested. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenBalanceAsync(String xChainId, String contractAddressOrAlias, String owner, final ApiCallback<Kip7TokenBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenBalanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mintToken
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mintTokenCall(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/mint"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mintTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling mintToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling mintToken(Async)");
        }
        
        com.squareup.okhttp.Call call = mintTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mint Token
     * Mints a specified amount of tokens to a specified account address.  The contract&#x27;s &#x60;totalSupply&#x60; will increase accordingly.&lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction. You can enter the Klaytn account address of an authorized Minter, or leave it blank, so it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).   &gt; **NOTE** &gt; &gt; Remember that a contract address is not an account address managed by Wallet Service, so it can&#x27;t in &#x60;from&#x60;.
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse mintToken(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = mintTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Mint Token
     * Mints a specified amount of tokens to a specified account address.  The contract&#x27;s &#x60;totalSupply&#x60; will increase accordingly.&lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction. You can enter the Klaytn account address of an authorized Minter, or leave it blank, so it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).   &gt; **NOTE** &gt; &gt; Remember that a contract address is not an account address managed by Wallet Service, so it can&#x27;t in &#x60;from&#x60;.
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> mintTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mint Token (asynchronously)
     * Mints a specified amount of tokens to a specified account address.  The contract&#x27;s &#x60;totalSupply&#x60; will increase accordingly.&lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction. You can enter the Klaytn account address of an authorized Minter, or leave it blank, so it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).   &gt; **NOTE** &gt; &gt; Remember that a contract address is not an account address managed by Wallet Service, so it can&#x27;t in &#x60;from&#x60;.
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mintTokenAsync(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renounceMinter
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param minterAddress The Klaytn account address whose authority to mint and burn tokens will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renounceMinterCall(String contractAddressOrAlias, String minterAddress, String xChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/minter/{minter-address}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "minter-address" + "\\}", apiClient.escapeString(minterAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renounceMinterValidateBeforeCall(String contractAddressOrAlias, String minterAddress, String xChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling renounceMinter(Async)");
        }
        // verify the required parameter 'minterAddress' is set
        if (minterAddress == null) {
            throw new ApiException("Missing the required parameter 'minterAddress' when calling renounceMinter(Async)");
        }
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling renounceMinter(Async)");
        }
        
        com.squareup.okhttp.Call call = renounceMinterCall(contractAddressOrAlias, minterAddress, xChainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Minter
     * Removes the authority granted to a specifed account to mint and burn tokens from a contract.  ##### Minter The address whose authority to mint and burn tokens will be removed.  You can omit the KRN if the &#x60;minter-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;). 
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param minterAddress The Klaytn account address whose authority to mint and burn tokens will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse renounceMinter(String contractAddressOrAlias, String minterAddress, String xChainId) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = renounceMinterWithHttpInfo(contractAddressOrAlias, minterAddress, xChainId);
        return resp.getData();
    }

    /**
     * Remove Minter
     * Removes the authority granted to a specifed account to mint and burn tokens from a contract.  ##### Minter The address whose authority to mint and burn tokens will be removed.  You can omit the KRN if the &#x60;minter-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;). 
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param minterAddress The Klaytn account address whose authority to mint and burn tokens will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> renounceMinterWithHttpInfo(String contractAddressOrAlias, String minterAddress, String xChainId) throws ApiException {
        com.squareup.okhttp.Call call = renounceMinterValidateBeforeCall(contractAddressOrAlias, minterAddress, xChainId, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Minter (asynchronously)
     * Removes the authority granted to a specifed account to mint and burn tokens from a contract.  ##### Minter The address whose authority to mint and burn tokens will be removed.  You can omit the KRN if the &#x60;minter-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;). 
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param minterAddress The Klaytn account address whose authority to mint and burn tokens will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renounceMinterAsync(String contractAddressOrAlias, String minterAddress, String xChainId, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renounceMinterValidateBeforeCall(contractAddressOrAlias, minterAddress, xChainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferFromToken
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferFromTokenCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/transfer-from"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferFromTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transferFromToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling transferFromToken(Async)");
        }
        
        com.squareup.okhttp.Call call = transferFromTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send Token on Behalf of Owner
     * Sends a token with an account authorized via [Approve Token Transfer](#operation/ApproveToken). You can view the remaining balance of authorized tokens by using [Get Approved Balance](#operation/GetTokenAllowance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that has been granted the authority from the &#x60;owner&#x60; to send tokens on his/her behalf.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse transferFromToken(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = transferFromTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Send Token on Behalf of Owner
     * Sends a token with an account authorized via [Approve Token Transfer](#operation/ApproveToken). You can view the remaining balance of authorized tokens by using [Get Approved Balance](#operation/GetTokenAllowance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that has been granted the authority from the &#x60;owner&#x60; to send tokens on his/her behalf.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> transferFromTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body) throws ApiException {
        com.squareup.okhttp.Call call = transferFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send Token on Behalf of Owner (asynchronously)
     * Sends a token with an account authorized via [Approve Token Transfer](#operation/ApproveToken). You can view the remaining balance of authorized tokens by using [Get Approved Balance](#operation/GetTokenAllowance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that has been granted the authority from the &#x60;owner&#x60; to send tokens on his/her behalf.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferFromTokenAsync(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferToken
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferTokenCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/transfer"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transferToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling transferToken(Async)");
        }
        
        com.squareup.okhttp.Call call = transferTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send Token
     * Sends a token to a specified address.  ##### From The account that sends the transaction to transfer tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  &lt;br/&gt;  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse transferToken(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = transferTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Send Token
     * Sends a token to a specified address.  ##### From The account that sends the transaction to transfer tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  &lt;br/&gt;  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> transferTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send Token (asynchronously)
     * Sends a token to a specified address.  ##### From The account that sends the transaction to transfer tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  &lt;br/&gt;  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferTokenAsync(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
