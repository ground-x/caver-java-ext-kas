/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * NFTTokenSummary
 */


public class NFTTokenSummary implements AnyOfPageableTokenSummaryItems {
  @SerializedName("kind")
  private String kind = null;

  @SerializedName("contractAddress")
  private String contractAddress = null;

  @SerializedName("updatedAt")
  private Long updatedAt = null;

  @SerializedName("balance")
  private String balance = null;

  @SerializedName("lastTransfer")
  private LastTransfer lastTransfer = null;

  @SerializedName("extras")
  private NFTTokenSummaryExtras extras = null;

  public NFTTokenSummary kind(String kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Contract type
   * @return kind
  **/
  @Schema(example = "nft", required = true, description = "Contract type")
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }

  public NFTTokenSummary contractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
    return this;
  }

   /**
   * Contract address (20-byte)
   * @return contractAddress
  **/
  @Schema(example = "0xfa9a1b66b970dc713ae71d56a7cc44b573d4c8f7", required = true, description = "Contract address (20-byte)")
  public String getContractAddress() {
    return contractAddress;
  }

  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }

  public NFTTokenSummary updatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last change in token ownership (timestamp)
   * @return updatedAt
  **/
  @Schema(example = "1607993770", required = true, description = "Last change in token ownership (timestamp)")
  public Long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }

  public NFTTokenSummary balance(String balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Token balance (in hexadecimal)
   * @return balance
  **/
  @Schema(example = "0x1", required = true, description = "Token balance (in hexadecimal)")
  public String getBalance() {
    return balance;
  }

  public void setBalance(String balance) {
    this.balance = balance;
  }

  public NFTTokenSummary lastTransfer(LastTransfer lastTransfer) {
    this.lastTransfer = lastTransfer;
    return this;
  }

   /**
   * Get lastTransfer
   * @return lastTransfer
  **/
  @Schema(required = true, description = "")
  public LastTransfer getLastTransfer() {
    return lastTransfer;
  }

  public void setLastTransfer(LastTransfer lastTransfer) {
    this.lastTransfer = lastTransfer;
  }

  public NFTTokenSummary extras(NFTTokenSummaryExtras extras) {
    this.extras = extras;
    return this;
  }

   /**
   * Get extras
   * @return extras
  **/
  @Schema(required = true, description = "")
  public NFTTokenSummaryExtras getExtras() {
    return extras;
  }

  public void setExtras(NFTTokenSummaryExtras extras) {
    this.extras = extras;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NFTTokenSummary nfTTokenSummary = (NFTTokenSummary) o;
    return Objects.equals(this.kind, nfTTokenSummary.kind) &&
        Objects.equals(this.contractAddress, nfTTokenSummary.contractAddress) &&
        Objects.equals(this.updatedAt, nfTTokenSummary.updatedAt) &&
        Objects.equals(this.balance, nfTTokenSummary.balance) &&
        Objects.equals(this.lastTransfer, nfTTokenSummary.lastTransfer) &&
        Objects.equals(this.extras, nfTTokenSummary.extras);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, contractAddress, updatedAt, balance, lastTransfer, extras);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NFTTokenSummary {\n");
    
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    lastTransfer: ").append(toIndentedString(lastTransfer)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
