/*
 * Metadata API
 * # Introduction  The Metadata API helps BApp (Blockchain Application) developers to manage assets and metadata for their tokens.  Asset and metadata are used when you mint Klaytn's [KIP-17](https://kips.klaytn.com/KIPs/kip-17) Tokens (NFTs), [KIP-37](https://kips.klaytn.com/KIPs/kip-37) Tokens (MTs).  An asset refers to an image or a video file of an NFT or MT. When you mint an NFT or MT, you first have to upload the asset and include the returned asset URI in the metadata when minting the token. Metadata originally refers to \"data of data\". In the context of NFTs or MTs, it refers to the properties (name, description, image URL etc.) of the tokens. It is stored in JSON format.  Metadata API enables you to do the following actions: - upload assets - upload metadata - provide an externally accessible URI for the assets and metadata  # Error Code This section contains the errors that might occur when using Metadata API. KAS uses [HTTP status codes](https://developer.mozilla.org/en/docs/Web/HTTP/Status). Error code tables can be found [here](#tag/err-400).
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.metadata.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.File;
import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.metadata.model.UploadAssetResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.metadata.model.UploadMetadataRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.metadata.model.UploadMetadataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataUploadApi {
    private ApiClient apiClient;

    public DataUploadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataUploadApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for uploadAsset
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadAssetCall(String xChainId, File file, String xKrn ,final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metadata/asset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadAssetValidateBeforeCall(String xChainId, File file, String xKrn ,final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling uploadAsset(Async)");
        }

        com.squareup.okhttp.Call call = uploadAssetCall(xChainId, file, xKrn ,progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload Asset
     * Uploads an asset. Supported file types include jpg, png, and gif. After uploading the asset file, it returns a public URI to access the asset.    You can use curl to upload the file as shown below: &#x60;&#x60;&#x60; curl --location --request POST &#x27;https://metadata-api.klaytnapi.com/v1/metadata/asset&#x27; \\ --header &#x27;x-chain-id: 8217&#x27; \\ --header &#x27;Authorization: Basic S0FTS0U0Mjc5Q01VMVhLVDg1UTRBVkRBOlFEMENMam5XRW94TzZfQ3pYLV9oLWRrQkZnMDVxR1FnbWlYcDAwVno&#x3D;&#x27; \\ --form &#x27;file&#x3D;@\&quot;/Users/usernamed/Documents/files/1kbfile.jpg\&quot;&#x27; &#x60;&#x60;&#x60;  &gt; **Note**  &gt; &gt;The URI in the response looks like this:  &gt; &gt;&#x60;https://metadata-store.klaytnapi.com/{storage-id}/{assetID}.{extension}&#x60;. &gt;- &#x60;{storage-id}&#x60;(UUID) is an identifier value automatically given to each user. &gt;- {assetID} is a unique identifier given to the uploaded asset.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param file  (optional)
     * @return UploadAssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadAssetResponse uploadAsset(String xChainId, File file , String xKrn) throws ApiException {
        ApiResponse<UploadAssetResponse> resp = uploadAssetWithHttpInfo(xChainId, file , xKrn);
        return resp.getData();
    }

    /**
     * Upload Asset
     * Uploads an asset. Supported file types include jpg, png, and gif. After uploading the asset file, it returns a public URI to access the asset.    You can use curl to upload the file as shown below: &#x60;&#x60;&#x60; curl --location --request POST &#x27;https://metadata-api.klaytnapi.com/v1/metadata/asset&#x27; \\ --header &#x27;x-chain-id: 8217&#x27; \\ --header &#x27;Authorization: Basic S0FTS0U0Mjc5Q01VMVhLVDg1UTRBVkRBOlFEMENMam5XRW94TzZfQ3pYLV9oLWRrQkZnMDVxR1FnbWlYcDAwVno&#x3D;&#x27; \\ --form &#x27;file&#x3D;@\&quot;/Users/usernamed/Documents/files/1kbfile.jpg\&quot;&#x27; &#x60;&#x60;&#x60;  &gt; **Note**  &gt; &gt;The URI in the response looks like this:  &gt; &gt;&#x60;https://metadata-store.klaytnapi.com/{storage-id}/{assetID}.{extension}&#x60;. &gt;- &#x60;{storage-id}&#x60;(UUID) is an identifier value automatically given to each user. &gt;- {assetID} is a unique identifier given to the uploaded asset.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param file  (optional)
     * @return ApiResponse&lt;UploadAssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadAssetResponse> uploadAssetWithHttpInfo(String xChainId, File file , String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = uploadAssetValidateBeforeCall(xChainId, file, xKrn, null, null);
        Type localVarReturnType = new TypeToken<UploadAssetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Asset (asynchronously)
     * Uploads an asset. Supported file types include jpg, png, and gif. After uploading the asset file, it returns a public URI to access the asset.    You can use curl to upload the file as shown below: &#x60;&#x60;&#x60; curl --location --request POST &#x27;https://metadata-api.klaytnapi.com/v1/metadata/asset&#x27; \\ --header &#x27;x-chain-id: 8217&#x27; \\ --header &#x27;Authorization: Basic S0FTS0U0Mjc5Q01VMVhLVDg1UTRBVkRBOlFEMENMam5XRW94TzZfQ3pYLV9oLWRrQkZnMDVxR1FnbWlYcDAwVno&#x3D;&#x27; \\ --form &#x27;file&#x3D;@\&quot;/Users/usernamed/Documents/files/1kbfile.jpg\&quot;&#x27; &#x60;&#x60;&#x60;  &gt; **Note**  &gt; &gt;The URI in the response looks like this:  &gt; &gt;&#x60;https://metadata-store.klaytnapi.com/{storage-id}/{assetID}.{extension}&#x60;. &gt;- &#x60;{storage-id}&#x60;(UUID) is an identifier value automatically given to each user. &gt;- {assetID} is a unique identifier given to the uploaded asset.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadAssetAsync(String xChainId, File file, String xKrn, final ApiCallback<UploadAssetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadAssetValidateBeforeCall(xChainId, file, xKrn , progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadAssetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for uploadMetadata
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMetadataCall(String xChainId, UploadMetadataRequest body, String xKrn ,final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMetadataValidateBeforeCall(String xChainId, UploadMetadataRequest body, String xKrn ,final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling uploadMetadata(Async)");
        }

        com.squareup.okhttp.Call call = uploadMetadataCall(xChainId, body, xKrn ,progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload Metadata
     * Uploads metadata. After uploading the metadata, it returns an externally accessible public URI for that metadata.  &gt; **Note**  &gt; &gt;The URI in the response looks like this:  &gt; &gt;&#x60;https://metadata-store.klaytnapi.com/{storage-id}/{fileName}&#x60;. &gt;- &#x60;{storage-id}&#x60;(UUID) is an identifer automatically given to each user. &gt;- With no filename: .../{storage-id}/&#x60;{assetId}.json&#x60; &gt;- With filename (example: &#x60;haha.json&#x60;): .../{storage-id}/haha.json
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return UploadMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadMetadataResponse uploadMetadata(String xChainId, UploadMetadataRequest body, String xKrn) throws ApiException {
        ApiResponse<UploadMetadataResponse> resp = uploadMetadataWithHttpInfo(xChainId, body , xKrn);
        return resp.getData();
    }

    /**
     * Upload Metadata
     * Uploads metadata. After uploading the metadata, it returns an externally accessible public URI for that metadata.  &gt; **Note**  &gt; &gt;The URI in the response looks like this:  &gt; &gt;&#x60;https://metadata-store.klaytnapi.com/{storage-id}/{fileName}&#x60;. &gt;- &#x60;{storage-id}&#x60;(UUID) is an identifer automatically given to each user. &gt;- With no filename: .../{storage-id}/&#x60;{assetId}.json&#x60; &gt;- With filename (example: &#x60;haha.json&#x60;): .../{storage-id}/haha.json
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;UploadMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadMetadataResponse> uploadMetadataWithHttpInfo(String xChainId, UploadMetadataRequest body, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = uploadMetadataValidateBeforeCall(xChainId, body, xKrn , null, null);
        Type localVarReturnType = new TypeToken<UploadMetadataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Metadata (asynchronously)
     * Uploads metadata. After uploading the metadata, it returns an externally accessible public URI for that metadata.  &gt; **Note**  &gt; &gt;The URI in the response looks like this:  &gt; &gt;&#x60;https://metadata-store.klaytnapi.com/{storage-id}/{fileName}&#x60;. &gt;- &#x60;{storage-id}&#x60;(UUID) is an identifer automatically given to each user. &gt;- With no filename: .../{storage-id}/&#x60;{assetId}.json&#x60; &gt;- With filename (example: &#x60;haha.json&#x60;): .../{storage-id}/haha.json
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMetadataAsync(String xChainId, UploadMetadataRequest body, String xKrn ,final ApiCallback<UploadMetadataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMetadataValidateBeforeCall(xChainId, body, xKrn ,progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadMetadataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
    
