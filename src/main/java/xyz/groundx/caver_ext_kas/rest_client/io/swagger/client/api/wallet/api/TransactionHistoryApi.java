/*
 * Wallet API
 * # Introduction Wallet API is an API for creating and managing Klaytn accounts as well as sending transactions. If you create your Klaytn account using Wallet API, you don't have to manage your private key yourself. Wallet API provides a wallet for safe storage of your Klaytn account private keys that you would need to use BApps. For more details on how to use Wallet API, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  Wallet API can be divided into the Account part, which creates and manages Klaytn accounts, and the Transaction part, which sends different kinds of transactions.  Wallet API creates, deletes and monitors Klaytn accounts and updates the accounts to multisig, and manages all private keys for all accounts registered on KAS.  Wallet API can also create transaction to send it to Klaytn. These include transactions sent from multisig accounts. In case of muiltisig accounts, a transaction will automatically be sent to Klaytn once \\(Threshold\\) is met. For more detail, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  There are mainly two types of transactions: basic transactions and fee delegation transactions. Fee delegation transactions include Global Fee Delegation transaction and user fee deletation transaction. With the Global Fee Delegation transaction scheme, the transaction fee will initially be paid by GroundX and then be charged to you at a later date. With the User Fee Delegation transaction scheme, you create an account that pays the transaction fees on behalf of the users when a transaction.  The functionalities and limits of Wallet API are shown below:  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | Limits | Supports Cypress(Mainnet), Baobab(Testnet) \\ Doesn't support (Service Chain \\) | |  |  | Doesn't support account management for external custodial keys | |  |  | Doesn't support multisig for RLP encoded transactions | |  | Account management | Create, retrieve and delete account | |  |  | Multisig account update | |  | Managing transaction | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) creating and sending transaction | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) creating and sending transaction | |  |  | RLP encoded transaction\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) creating and sending | |  |  | Managing and sending multisig transactions | |  | Administrator | Manage resource pool\\(create, query pool, delete, retrieve account \\) | 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.wallet.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.wallet.model.FDTransactionWithCurrencyResult;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.wallet.model.FDTransactionWithCurrencyResultList;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.wallet.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionHistoryApi {
    private ApiClient apiClient;

    public TransactionHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionHistoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getV2HistoryFdTx
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @param from The Klaytn account address of the sender (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV2HistoryFdTxCall(String xChainId, String from, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/history/fd/tx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV2HistoryFdTxValidateBeforeCall(String xChainId, String from, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getV2HistoryFdTxCall(xChainId, from, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Fee Delegation Transaction History
     * Returns the history of fee delegation transactions. You can find out the KRW and USD price of the fees at the time of sending the transaction. If you add the &#x60;from&#x60; query parameter, only the transactions from a certain address will be returned.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @param from The Klaytn account address of the sender (optional)
     * @return FDTransactionWithCurrencyResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionWithCurrencyResultList getV2HistoryFdTx(String xChainId, String from) throws ApiException {
        ApiResponse<FDTransactionWithCurrencyResultList> resp = getV2HistoryFdTxWithHttpInfo(xChainId, from);
        return resp.getData();
    }

    /**
     * Get Fee Delegation Transaction History
     * Returns the history of fee delegation transactions. You can find out the KRW and USD price of the fees at the time of sending the transaction. If you add the &#x60;from&#x60; query parameter, only the transactions from a certain address will be returned.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @param from The Klaytn account address of the sender (optional)
     * @return ApiResponse&lt;FDTransactionWithCurrencyResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionWithCurrencyResultList> getV2HistoryFdTxWithHttpInfo(String xChainId, String from) throws ApiException {
        com.squareup.okhttp.Call call = getV2HistoryFdTxValidateBeforeCall(xChainId, from, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionWithCurrencyResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Fee Delegation Transaction History (asynchronously)
     * Returns the history of fee delegation transactions. You can find out the KRW and USD price of the fees at the time of sending the transaction. If you add the &#x60;from&#x60; query parameter, only the transactions from a certain address will be returned.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @param from The Klaytn account address of the sender (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV2HistoryFdTxAsync(String xChainId, String from, final ApiCallback<FDTransactionWithCurrencyResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV2HistoryFdTxValidateBeforeCall(xChainId, from, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionWithCurrencyResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getV2HistoryFdTxTransactionHash
     * @param transactionHash Transaction hash (required)
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV2HistoryFdTxTransactionHashCall(String transactionHash, String xChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/history/fd/tx/{transaction-hash}"
            .replaceAll("\\{" + "transaction-hash" + "\\}", apiClient.escapeString(transactionHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV2HistoryFdTxTransactionHashValidateBeforeCall(String transactionHash, String xChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transactionHash' is set
        if (transactionHash == null) {
            throw new ApiException("Missing the required parameter 'transactionHash' when calling getV2HistoryFdTxTransactionHash(Async)");
        }
        
        com.squareup.okhttp.Call call = getV2HistoryFdTxTransactionHashCall(transactionHash, xChainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Fee Delegation Transaction History
     * Returns a single fee delegation transaction. You can find out the KRW and USD price of the fees at the time of sending the transaction.
     * @param transactionHash Transaction hash (required)
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @return FDTransactionWithCurrencyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionWithCurrencyResult getV2HistoryFdTxTransactionHash(String transactionHash, String xChainId) throws ApiException {
        ApiResponse<FDTransactionWithCurrencyResult> resp = getV2HistoryFdTxTransactionHashWithHttpInfo(transactionHash, xChainId);
        return resp.getData();
    }

    /**
     * Get Fee Delegation Transaction History
     * Returns a single fee delegation transaction. You can find out the KRW and USD price of the fees at the time of sending the transaction.
     * @param transactionHash Transaction hash (required)
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @return ApiResponse&lt;FDTransactionWithCurrencyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionWithCurrencyResult> getV2HistoryFdTxTransactionHashWithHttpInfo(String transactionHash, String xChainId) throws ApiException {
        com.squareup.okhttp.Call call = getV2HistoryFdTxTransactionHashValidateBeforeCall(transactionHash, xChainId, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionWithCurrencyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Fee Delegation Transaction History (asynchronously)
     * Returns a single fee delegation transaction. You can find out the KRW and USD price of the fees at the time of sending the transaction.
     * @param transactionHash Transaction hash (required)
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV2HistoryFdTxTransactionHashAsync(String transactionHash, String xChainId, final ApiCallback<FDTransactionWithCurrencyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV2HistoryFdTxTransactionHashValidateBeforeCall(transactionHash, xChainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionWithCurrencyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
