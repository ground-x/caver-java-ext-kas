/*
 * KIP-7 API
 * # Introduction KIP-7 API is a RESTful API for managing KIP-7 contracts and tokens that follow the [KIP-7 Fungible Token Standard](https://kips.klaytn.com/KIPs/kip-7).   You can deploy contracts and send tokens using the default contract managing account (`deployer`) and an `alias`. And by using SDK like caver,  you can manage your contracts and tokens using [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) for contracts created on the Klaytn Network.     # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |  | 1130050 | incorrect request; spender 1130107 | incorrect bookmark 1134410 | invalid address; to</br>invalid address; owner</br>invalid address; address 1134411 | invalid amount; amount |  ## 404: Not Found   | Code | Messages |  | --- | --- |  | 1134504 | contract not found 1134506 | deployer not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1134900 | duplicate alias 1134902 | contract already paused 1134903 | contract already unpaused |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DeployKip7ContractRequest
 */


public class DeployKip7ContractRequest {
  @SerializedName("alias")
  private String alias = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("decimals")
  private Long decimals = null;

  @SerializedName("initialSupply")
  private String initialSupply = null;

  public DeployKip7ContractRequest alias(String alias) {
    this.alias = alias;
    return this;
  }

   /**
   * Contract alias; for KIP-7 API, you can use not only the contract address but also an alias.
   * @return alias
  **/
  @Schema(example = "mycontract", required = true, description = "Contract alias; for KIP-7 API, you can use not only the contract address but also an alias.")
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public DeployKip7ContractRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Contract name
   * @return name
  **/
  @Schema(example = "MyKIP7", required = true, description = "Contract name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DeployKip7ContractRequest symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Token symbol
   * @return symbol
  **/
  @Schema(example = "MSK7", required = true, description = "Token symbol")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public DeployKip7ContractRequest decimals(Long decimals) {
    this.decimals = decimals;
    return this;
  }

   /**
   * Token decimal place. The default value is &#x60;0&#x60;.
   * @return decimals
  **/
  @Schema(example = "8", description = "Token decimal place. The default value is `0`.")
  public Long getDecimals() {
    return decimals;
  }

  public void setDecimals(Long decimals) {
    this.decimals = decimals;
  }

  public DeployKip7ContractRequest initialSupply(String initialSupply) {
    this.initialSupply = initialSupply;
    return this;
  }

   /**
   * Initial supply (in hexadecimal)
   * @return initialSupply
  **/
  @Schema(example = "0x100", required = true, description = "Initial supply (in hexadecimal)")
  public String getInitialSupply() {
    return initialSupply;
  }

  public void setInitialSupply(String initialSupply) {
    this.initialSupply = initialSupply;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployKip7ContractRequest deployKip7ContractRequest = (DeployKip7ContractRequest) o;
    return Objects.equals(this.alias, deployKip7ContractRequest.alias) &&
        Objects.equals(this.name, deployKip7ContractRequest.name) &&
        Objects.equals(this.symbol, deployKip7ContractRequest.symbol) &&
        Objects.equals(this.decimals, deployKip7ContractRequest.decimals) &&
        Objects.equals(this.initialSupply, deployKip7ContractRequest.initialSupply);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, name, symbol, decimals, initialSupply);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployKip7ContractRequest {\n");
    
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    initialSupply: ").append(toIndentedString(initialSupply)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
