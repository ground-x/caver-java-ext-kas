/*
 * Metadata API
 * # Introduction  The Metadata API helps BApp (Blockchain Application) developers to manage assets and metadata for their tokens.  Asset and metadata are used when you mint Klaytn's [KIP-17](https://kips.klaytn.com/KIPs/kip-17) Tokens (NFTs), [KIP-37](https://kips.klaytn.com/KIPs/kip-37) Tokens (MTs).  An asset refers to an image or a video file of an NFT or MT. When you mint an NFT or MT, you first have to upload the asset and include the returned asset URI in the metadata when minting the token. Metadata originally refers to \"data of data\". In the context of NFTs or MTs, it refers to the properties (name, description, image URL etc.) of the tokens. It is stored in JSON format.  Metadata API enables you to do the following actions: - upload assets - upload metadata - provide an externally accessible URI for the assets and metadata  # Error Code This section contains the errors that might occur when using Metadata API. KAS uses [HTTP status codes](https://developer.mozilla.org/en/docs/Web/HTTP/Status). Error code tables can be found [here](#tag/err-400).
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.metadata.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * UploadMetadataRequest
 */


public class UploadMetadataRequest {
  @SerializedName("metadata")
  private Map<String, Object> metadata = new HashMap<String, Object>();

  @SerializedName("filename")
  private String filename = null;

  public UploadMetadataRequest metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public UploadMetadataRequest putMetadataItem(String key, Object metadataItem) {
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * JSON metadata
   * @return metadata
  **/
  @Schema(required = true, description = "JSON metadata")
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }

  public UploadMetadataRequest filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * A file name of your choice. File extension must be &#x60;.json&#x60;. If the file name is already taken you will get a duplicate key error.
   * @return filename
  **/
  @Schema(description = "A file name of your choice. File extension must be `.json`. If the file name is already taken you will get a duplicate key error.")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadMetadataRequest uploadMetadataRequest = (UploadMetadataRequest) o;
    return Objects.equals(this.metadata, uploadMetadataRequest.metadata) &&
        Objects.equals(this.filename, uploadMetadataRequest.filename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, filename);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadMetadataRequest {\n");

    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}