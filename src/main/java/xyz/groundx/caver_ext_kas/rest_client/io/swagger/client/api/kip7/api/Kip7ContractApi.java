/*
 * KIP-7 API
 * # Introduction The KIP-17 API helps BApp (Blockchain Application) developers to manage contracts and tokens created in accordance with the [KIP-7](https://docs.klaytnapi.com/v/en/api#kip-7-api) standard, which is Klaytn's technical speficication for Fungible Tokens.  The functionality of the multiple endpoints enables you to do the following actions: - deploy smart contracts - manage the entire life cycle of an FT from minting, to sending and burning - get contract or token data - authorize a third party to execute token transfers - send tokens on behalf of the owner   For more details on KAS, please refer to [KAS Docs](https://docs.klaytnapi.com/). If you have any questions or comments, please leave them in the [Klaytn Developers Forum](http://forum.klaytn.com).    **alias**  When a method of the KIP-17 API requires a contract address, you can use the contract **alias**. You can give the contract an alias when deploying, and use it in place of the complicated address.  **deployer**  When you create a contract, you will be assigned one `deployer` address per Credential, which is the account address used for managing contracts. In KIP-7 API, this address is used in many different token-related operations. You can find the `deployer` address with [KIP7Deployer](#operation/GetDefaultDeployer).  Even with contracts created using SDKs like \"caver\", you can still use the contract address and [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) account to manage your contracts and tokens.  # Fee Payer Options  KAS KIP-17 supports four ways to pay the transaction fees.<br />  **1. Only using KAS Global FeePayer Account** <br /> Sends all transactions using KAS Global FeePayer Account. ``` {     \"options\": {       \"enableGlobalFeePayer\": true     } } ```  <br />  **2. Using User FeePayer Account** <br /> Sends all transactions using User FeePayer Account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```  <br />  **3. Using both KAS Global FeePayer Account + User FeePayer Account** <br /> Sends transactions using User FeePayer Account by default, and switches to the KAS Global FeePayer Account when balances are insufficient. ``` {   \"options\": {     \"enableGlobalFeePayer\": true,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```  <br />  **4. Not using FeePayer Account** <br /> Sends transactions the default way, paying the transaction fee from the user's account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false   } } ```  # Error Code This section contains the errors that might occur when using the KIP-17 API. KAS uses HTTP status codes. More details can be found in this [link](https://developer.mozilla.org/en/docs/Web/HTTP/Status). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.AddPauserKip7Request;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.DeployKip7ContractRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7ContractListResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7ContractMetadataResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7DeployResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7TransactionStatusResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.PauseKip7Request;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.UnpauseKip7Request;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.UpdateKip7ContractRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Kip7ContractApi {
    private ApiClient apiClient;

    public Kip7ContractApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Kip7ContractApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPauser
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPauserCall(String xChainId, String contractAddressOrAlias, AddPauserKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/pauser"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPauserValidateBeforeCall(String xChainId, String contractAddressOrAlias, AddPauserKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling addPauser(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling addPauser(Async)");
        }
        
        com.squareup.okhttp.Call call = addPauserCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Contract Pauser
     * Grants a specified account the authority to pause the actions of a contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf. To remove the authority, use [Remove Pauser](#operation/RenouncePauser).  &gt; **NOTE** &gt;  &gt; The &#x60;pauser&#x60; needs to be an account managed by Wallet API in order to use [Remove Contract Pauser API](#operation/RenouncePauser). Otherwise, you will have to sign and send the transaction on your own.  ##### Sender The account that grants the authority. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).     You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br/&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse addPauser(String xChainId, String contractAddressOrAlias, AddPauserKip7Request body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = addPauserWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Add Contract Pauser
     * Grants a specified account the authority to pause the actions of a contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf. To remove the authority, use [Remove Pauser](#operation/RenouncePauser).  &gt; **NOTE** &gt;  &gt; The &#x60;pauser&#x60; needs to be an account managed by Wallet API in order to use [Remove Contract Pauser API](#operation/RenouncePauser). Otherwise, you will have to sign and send the transaction on your own.  ##### Sender The account that grants the authority. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).     You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br/&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> addPauserWithHttpInfo(String xChainId, String contractAddressOrAlias, AddPauserKip7Request body) throws ApiException {
        com.squareup.okhttp.Call call = addPauserValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Contract Pauser (asynchronously)
     * Grants a specified account the authority to pause the actions of a contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf. To remove the authority, use [Remove Pauser](#operation/RenouncePauser).  &gt; **NOTE** &gt;  &gt; The &#x60;pauser&#x60; needs to be an account managed by Wallet API in order to use [Remove Contract Pauser API](#operation/RenouncePauser). Otherwise, you will have to sign and send the transaction on your own.  ##### Sender The account that grants the authority. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).     You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br/&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPauserAsync(String xChainId, String contractAddressOrAlias, AddPauserKip7Request body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPauserValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployContract
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployContractCall(String xChainId, DeployKip7ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployContractValidateBeforeCall(String xChainId, DeployKip7ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling deployContract(Async)");
        }
        
        com.squareup.okhttp.Call call = deployContractCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploy Contract
     * Deploys a new KIP-7 contract with the given parameters. You will automatically be assigned a &#x60;deployer&#x60; address, which cannot be changed. You can find the &#x60;deployer&#x60; address using [KIP7Deployer](#operation/GetDefaultDeployer).  The alias must only consist of lowercase letters, numbers and hyphens, and the first letter is restricted to a lowercase letter.&lt;p&gt;&lt;/p&gt;  ##### Options With &#x60;options&#x60; you can set the transaction fee payment method. You can find more details in [Fee Payer Options](#section/Fee-Payer-Options).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param body  (optional)
     * @return Kip7DeployResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7DeployResponse deployContract(String xChainId, DeployKip7ContractRequest body) throws ApiException {
        ApiResponse<Kip7DeployResponse> resp = deployContractWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * Deploy Contract
     * Deploys a new KIP-7 contract with the given parameters. You will automatically be assigned a &#x60;deployer&#x60; address, which cannot be changed. You can find the &#x60;deployer&#x60; address using [KIP7Deployer](#operation/GetDefaultDeployer).  The alias must only consist of lowercase letters, numbers and hyphens, and the first letter is restricted to a lowercase letter.&lt;p&gt;&lt;/p&gt;  ##### Options With &#x60;options&#x60; you can set the transaction fee payment method. You can find more details in [Fee Payer Options](#section/Fee-Payer-Options).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7DeployResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7DeployResponse> deployContractWithHttpInfo(String xChainId, DeployKip7ContractRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deployContractValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7DeployResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy Contract (asynchronously)
     * Deploys a new KIP-7 contract with the given parameters. You will automatically be assigned a &#x60;deployer&#x60; address, which cannot be changed. You can find the &#x60;deployer&#x60; address using [KIP7Deployer](#operation/GetDefaultDeployer).  The alias must only consist of lowercase letters, numbers and hyphens, and the first letter is restricted to a lowercase letter.&lt;p&gt;&lt;/p&gt;  ##### Options With &#x60;options&#x60; you can set the transaction fee payment method. You can find more details in [Fee Payer Options](#section/Fee-Payer-Options).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployContractAsync(String xChainId, DeployKip7ContractRequest body, final ApiCallback<Kip7DeployResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployContractValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7DeployResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContract
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getContract(Async)");
        }
        
        com.squareup.okhttp.Call call = getContractCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contract
     * Returns the data for a specified KIP-7 contract. You can use either the contract alias or contract address.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @return Kip7ContractMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7ContractMetadataResponse getContract(String xChainId, String contractAddressOrAlias) throws ApiException {
        ApiResponse<Kip7ContractMetadataResponse> resp = getContractWithHttpInfo(xChainId, contractAddressOrAlias);
        return resp.getData();
    }

    /**
     * Get Contract
     * Returns the data for a specified KIP-7 contract. You can use either the contract alias or contract address.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @return ApiResponse&lt;Kip7ContractMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7ContractMetadataResponse> getContractWithHttpInfo(String xChainId, String contractAddressOrAlias) throws ApiException {
        com.squareup.okhttp.Call call = getContractValidateBeforeCall(xChainId, contractAddressOrAlias, null, null);
        Type localVarReturnType = new TypeToken<Kip7ContractMetadataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contract (asynchronously)
     * Returns the data for a specified KIP-7 contract. You can use either the contract alias or contract address.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractAsync(String xChainId, String contractAddressOrAlias, final ApiCallback<Kip7ContractMetadataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContractValidateBeforeCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7ContractMetadataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listContractsInDeployerPool
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param status The contract deployment status you wish to return. You can select only one of [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;]. The default value is &#x60;all&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listContractsInDeployerPoolCall(String xChainId, String size, String cursor, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listContractsInDeployerPoolValidateBeforeCall(String xChainId, String size, String cursor, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling listContractsInDeployerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = listContractsInDeployerPoolCall(xChainId, size, cursor, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contract List
     * Returns a list of all KIP-7 contracts deployed by the user in chronological order of contract creation request.&lt;p&gt;&lt;/p&gt;   The &#x60;status&#x60; field in the request has the following meanings:&lt;p&gt;&lt;/p&gt;   - &#x60;init&#x60;: The initial state before sending the transaction  - &#x60;submitted&#x60;: After the contract deployment transaction has been sent  - &#x60;deployed&#x60;: The state in which the contract is deployed&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param status The contract deployment status you wish to return. You can select only one of [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;]. The default value is &#x60;all&#x60;. (optional)
     * @return Kip7ContractListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7ContractListResponse listContractsInDeployerPool(String xChainId, String size, String cursor, String status) throws ApiException {
        ApiResponse<Kip7ContractListResponse> resp = listContractsInDeployerPoolWithHttpInfo(xChainId, size, cursor, status);
        return resp.getData();
    }

    /**
     * Get Contract List
     * Returns a list of all KIP-7 contracts deployed by the user in chronological order of contract creation request.&lt;p&gt;&lt;/p&gt;   The &#x60;status&#x60; field in the request has the following meanings:&lt;p&gt;&lt;/p&gt;   - &#x60;init&#x60;: The initial state before sending the transaction  - &#x60;submitted&#x60;: After the contract deployment transaction has been sent  - &#x60;deployed&#x60;: The state in which the contract is deployed&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param status The contract deployment status you wish to return. You can select only one of [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;]. The default value is &#x60;all&#x60;. (optional)
     * @return ApiResponse&lt;Kip7ContractListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7ContractListResponse> listContractsInDeployerPoolWithHttpInfo(String xChainId, String size, String cursor, String status) throws ApiException {
        com.squareup.okhttp.Call call = listContractsInDeployerPoolValidateBeforeCall(xChainId, size, cursor, status, null, null);
        Type localVarReturnType = new TypeToken<Kip7ContractListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contract List (asynchronously)
     * Returns a list of all KIP-7 contracts deployed by the user in chronological order of contract creation request.&lt;p&gt;&lt;/p&gt;   The &#x60;status&#x60; field in the request has the following meanings:&lt;p&gt;&lt;/p&gt;   - &#x60;init&#x60;: The initial state before sending the transaction  - &#x60;submitted&#x60;: After the contract deployment transaction has been sent  - &#x60;deployed&#x60;: The state in which the contract is deployed&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param status The contract deployment status you wish to return. You can select only one of [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;]. The default value is &#x60;all&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listContractsInDeployerPoolAsync(String xChainId, String size, String cursor, String status, final ApiCallback<Kip7ContractListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listContractsInDeployerPoolValidateBeforeCall(xChainId, size, cursor, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7ContractListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pauseContract
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pauseContractCall(String xChainId, String contractAddressOrAlias, PauseKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/pause"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pauseContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, PauseKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling pauseContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling pauseContract(Async)");
        }
        
        com.squareup.okhttp.Call call = pauseContractCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pause Contract
     * Pauses all actions of a specified contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf. You can resume the contract by using [Resume Contract](#operation/UnpauseContract).&lt;p&gt;&lt;/p&gt;  ##### Pauser The account that sends the transaction to pause the contract. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;pauser&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse pauseContract(String xChainId, String contractAddressOrAlias, PauseKip7Request body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = pauseContractWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Pause Contract
     * Pauses all actions of a specified contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf. You can resume the contract by using [Resume Contract](#operation/UnpauseContract).&lt;p&gt;&lt;/p&gt;  ##### Pauser The account that sends the transaction to pause the contract. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;pauser&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> pauseContractWithHttpInfo(String xChainId, String contractAddressOrAlias, PauseKip7Request body) throws ApiException {
        com.squareup.okhttp.Call call = pauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pause Contract (asynchronously)
     * Pauses all actions of a specified contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf. You can resume the contract by using [Resume Contract](#operation/UnpauseContract).&lt;p&gt;&lt;/p&gt;  ##### Pauser The account that sends the transaction to pause the contract. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;pauser&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pauseContractAsync(String xChainId, String contractAddressOrAlias, PauseKip7Request body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renouncePauser
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param pauserAddress The Klaytn account address whose authority to pause contract will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renouncePauserCall(String contractAddressOrAlias, String pauserAddress, String xChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/pauser/{pauser-address}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "pauser-address" + "\\}", apiClient.escapeString(pauserAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renouncePauserValidateBeforeCall(String contractAddressOrAlias, String pauserAddress, String xChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling renouncePauser(Async)");
        }
        // verify the required parameter 'pauserAddress' is set
        if (pauserAddress == null) {
            throw new ApiException("Missing the required parameter 'pauserAddress' when calling renouncePauser(Async)");
        }
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling renouncePauser(Async)");
        }
        
        com.squareup.okhttp.Call call = renouncePauserCall(contractAddressOrAlias, pauserAddress, xChainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Contract Pauser
     * Removes the authority given to a certain account to pause the actions of specified contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf.  ##### Pauser The account whose authority to pause the contract will be removed.  You can omit the KRN if the &#x60;pauser-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param pauserAddress The Klaytn account address whose authority to pause contract will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse renouncePauser(String contractAddressOrAlias, String pauserAddress, String xChainId) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = renouncePauserWithHttpInfo(contractAddressOrAlias, pauserAddress, xChainId);
        return resp.getData();
    }

    /**
     * Remove Contract Pauser
     * Removes the authority given to a certain account to pause the actions of specified contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf.  ##### Pauser The account whose authority to pause the contract will be removed.  You can omit the KRN if the &#x60;pauser-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param pauserAddress The Klaytn account address whose authority to pause contract will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> renouncePauserWithHttpInfo(String contractAddressOrAlias, String pauserAddress, String xChainId) throws ApiException {
        com.squareup.okhttp.Call call = renouncePauserValidateBeforeCall(contractAddressOrAlias, pauserAddress, xChainId, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Contract Pauser (asynchronously)
     * Removes the authority given to a certain account to pause the actions of specified contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf.  ##### Pauser The account whose authority to pause the contract will be removed.  You can omit the KRN if the &#x60;pauser-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param pauserAddress The Klaytn account address whose authority to pause contract will be removed. (required)
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renouncePauserAsync(String contractAddressOrAlias, String pauserAddress, String xChainId, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renouncePauserValidateBeforeCall(contractAddressOrAlias, pauserAddress, xChainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unpauseContract
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unpauseContractCall(String xChainId, String contractAddressOrAlias, UnpauseKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/unpause"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unpauseContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, UnpauseKip7Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling unpauseContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling unpauseContract(Async)");
        }
        
        com.squareup.okhttp.Call call = unpauseContractCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resume Contract
     * Resumes the actions of the given contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf.   ##### Pauser The account that sends the transaction to resume the contract. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;pauser&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br/&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse unpauseContract(String xChainId, String contractAddressOrAlias, UnpauseKip7Request body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = unpauseContractWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Resume Contract
     * Resumes the actions of the given contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf.   ##### Pauser The account that sends the transaction to resume the contract. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;pauser&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br/&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> unpauseContractWithHttpInfo(String xChainId, String contractAddressOrAlias, UnpauseKip7Request body) throws ApiException {
        com.squareup.okhttp.Call call = unpauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resume Contract (asynchronously)
     * Resumes the actions of the given contract. The actions of a contract here refer to sending tokens and sending tokens on the owner&#x27;s behalf.   ##### Pauser The account that sends the transaction to resume the contract. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;pauser&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br/&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unpauseContractAsync(String xChainId, String contractAddressOrAlias, UnpauseKip7Request body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unpauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContract
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContractCall(String xChainId, String contractAddressOrAlias, UpdateKip7ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, UpdateKip7ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling updateContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling updateContract(Async)");
        }
        
        com.squareup.okhttp.Call call = updateContractCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Contract
     * Updates the fee payment method for a contract.  ##### Options With &#x60;options&#x60; you can set the transaction fee payment method. You can find more details in [Fee Payer Options](#section/Fee-Payer-Options).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return Kip7ContractMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7ContractMetadataResponse updateContract(String xChainId, String contractAddressOrAlias, UpdateKip7ContractRequest body) throws ApiException {
        ApiResponse<Kip7ContractMetadataResponse> resp = updateContractWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Update Contract
     * Updates the fee payment method for a contract.  ##### Options With &#x60;options&#x60; you can set the transaction fee payment method. You can find more details in [Fee Payer Options](#section/Fee-Payer-Options).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7ContractMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7ContractMetadataResponse> updateContractWithHttpInfo(String xChainId, String contractAddressOrAlias, UpdateKip7ContractRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateContractValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7ContractMetadataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Contract (asynchronously)
     * Updates the fee payment method for a contract.  ##### Options With &#x60;options&#x60; you can set the transaction fee payment method. You can find more details in [Fee Payer Options](#section/Fee-Payer-Options).
     * @param xChainId Klaytn Network Chain ID(1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContractAsync(String xChainId, String contractAddressOrAlias, UpdateKip7ContractRequest body, final ApiCallback<Kip7ContractMetadataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContractValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7ContractMetadataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
