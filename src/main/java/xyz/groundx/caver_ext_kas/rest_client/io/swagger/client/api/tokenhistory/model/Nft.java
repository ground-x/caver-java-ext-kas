/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Nft
 */


public class Nft {
  @SerializedName("owner")
  private String owner = null;

  @SerializedName("previousOwner")
  private String previousOwner = null;

  @SerializedName("tokenId")
  private String tokenId = null;

  @SerializedName("tokenUri")
  private String tokenUri = null;

  @SerializedName("transactionHash")
  private String transactionHash = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("updatedAt")
  private Long updatedAt = null;

  public Nft owner(String owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Owner EOA (20-byte)
   * @return owner
  **/
  @Schema(example = "0x5e47b195eeb11d72f5e1d27aebb6d341f1a9bedb", required = true, description = "Owner EOA (20-byte)")
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public Nft previousOwner(String previousOwner) {
    this.previousOwner = previousOwner;
    return this;
  }

   /**
   * Previous owner EOA (20-byte)
   * @return previousOwner
  **/
  @Schema(example = "0xb4bf60383c64d47f2e667f2fe8f7ed0c9380f770", required = true, description = "Previous owner EOA (20-byte)")
  public String getPreviousOwner() {
    return previousOwner;
  }

  public void setPreviousOwner(String previousOwner) {
    this.previousOwner = previousOwner;
  }

  public Nft tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Token ID (in hexadecimal)
   * @return tokenId
  **/
  @Schema(example = "0x1", required = true, description = "Token ID (in hexadecimal)")
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }

  public Nft tokenUri(String tokenUri) {
    this.tokenUri = tokenUri;
    return this;
  }

   /**
   * Token URL
   * @return tokenUri
  **/
  @Schema(example = "https://link.to/nft/1", required = true, description = "Token URL")
  public String getTokenUri() {
    return tokenUri;
  }

  public void setTokenUri(String tokenUri) {
    this.tokenUri = tokenUri;
  }

  public Nft transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Last transaction hash(32-byte)
   * @return transactionHash
  **/
  @Schema(example = "0xc4a32f41e829f50c4e8774be68864f522120a2047db2143b59b3919ebd9234f8", required = true, description = "Last transaction hash(32-byte)")
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }

  public Nft createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Time of token creation (timestamp)
   * @return createdAt
  **/
  @Schema(example = "1592180992", required = true, description = "Time of token creation (timestamp)")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public Nft updatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last change in token information (timestamp)
   * @return updatedAt
  **/
  @Schema(example = "1592180992", required = true, description = "Last change in token information (timestamp)")
  public Long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Nft nft = (Nft) o;
    return Objects.equals(this.owner, nft.owner) &&
        Objects.equals(this.previousOwner, nft.previousOwner) &&
        Objects.equals(this.tokenId, nft.tokenId) &&
        Objects.equals(this.tokenUri, nft.tokenUri) &&
        Objects.equals(this.transactionHash, nft.transactionHash) &&
        Objects.equals(this.createdAt, nft.createdAt) &&
        Objects.equals(this.updatedAt, nft.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(owner, previousOwner, tokenId, tokenUri, transactionHash, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Nft {\n");
    
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    previousOwner: ").append(toIndentedString(previousOwner)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tokenUri: ").append(toIndentedString(tokenUri)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
