/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LastTransfer
 */


public class LastTransfer {
  @SerializedName("transactionHash")
  private String transactionHash = null;

  @SerializedName("transferFrom")
  private String transferFrom = null;

  @SerializedName("transferTo")
  private String transferTo = null;

  public LastTransfer transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Transaction hash
   * @return transactionHash
  **/
  @Schema(example = "92787101775136283788116696130206602888805531084566083190358739835879365818367", required = true, description = "Transaction hash")
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }

  public LastTransfer transferFrom(String transferFrom) {
    this.transferFrom = transferFrom;
    return this;
  }

   /**
   * Sender EOA (20-byte)
   * @return transferFrom
  **/
  @Schema(example = "1084595347279233181306210657890446417538037454600", required = true, description = "Sender EOA (20-byte)")
  public String getTransferFrom() {
    return transferFrom;
  }

  public void setTransferFrom(String transferFrom) {
    this.transferFrom = transferFrom;
  }

  public LastTransfer transferTo(String transferTo) {
    this.transferTo = transferTo;
    return this;
  }

   /**
   * Receiver EOA (20-byte)
   * @return transferTo
  **/
  @Schema(example = "18868163600244298753922165206477148089088051745", required = true, description = "Receiver EOA (20-byte)")
  public String getTransferTo() {
    return transferTo;
  }

  public void setTransferTo(String transferTo) {
    this.transferTo = transferTo;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LastTransfer lastTransfer = (LastTransfer) o;
    return Objects.equals(this.transactionHash, lastTransfer.transactionHash) &&
        Objects.equals(this.transferFrom, lastTransfer.transferFrom) &&
        Objects.equals(this.transferTo, lastTransfer.transferTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionHash, transferFrom, transferTo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LastTransfer {\n");
    
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    transferFrom: ").append(toIndentedString(transferFrom)).append("\n");
    sb.append("    transferTo: ").append(toIndentedString(transferTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
