/*
 * KIP-17 API
 * # Introduction The KIP-17 API helps BApp (Blockchain Application) developers to manage contracts and tokens created in accordance with the [KIP-17](https://docs.klaytnapi.com/v/en/api#kip-17-api) standard, which is Klaytn's technical speficication for Non-Fungible Tokens.  The functionality of the multiple endpoints enables you to do the following actions: - deploy smart contracts - manage the entire life cycle of an NFT from minting, to sending and burning - get contract or token data - authorize a third party to execute token transfers - view token ownership history  For more details on KAS, please refer to [KAS Docs](https://docs.klaytnapi.com/). If you have any questions or comments, please leave them in the [Klaytn Developers Forum](http://forum.klaytn.com).    **alias**  When a method of the KIP-17 API requires a contract address, you can use the contract **alias**. You can give the contract an alias when deploying, and use it in place of the complicated address.  # Fee Payer Options KAS KIP-17 supports four ways to pay the transaction fees.<br />  **1. Only using KAS Global FeePayer Account** <br /> Sends all transactions using KAS Global FeePayer Account. ``` {     \"options\": {       \"enableGlobalFeePayer\": true     } } ``` <br />  **2. Using User FeePayer Account** <br /> Sends all transactions using User FeePayer Account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ``` <br />  **3. Using both KAS Global FeePayer Account + User FeePayer Account** <br /> Sends transactions using User FeePayer Account by default, and switches to the KAS Global FeePayer Account when balances are insufficient. ``` {   \"options\": {     \"enableGlobalFeePayer\": true,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ``` <br />  **4. Not using FeePayer Account** <br /> Sends transactions the default way, paying the transaction fee from the user's account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false   } } ``` <br />  # Error Code This section contains the errors that might occur when using the KIP-17 API. KAS uses HTTP status codes. More details can be found in this [link](https://developer.mozilla.org/en/docs/Web/HTTP/Status).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.ApproveAllKip17Request;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.ApproveKip17TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.BurnKip17TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.GetKip17TokenHistoryResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.GetKip17TokenResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.GetOwnerKip17TokensResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.Kip17TokenListResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.Kip17TransactionStatusResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.MintKip17TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.TransferKip17TokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Kip17TokenApi {
    private ApiClient apiClient;

    public Kip17TokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Kip17TokenApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for approveAll
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveAllCall(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/approveall"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveAllValidateBeforeCall(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling approveAll(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling approveAll(Async)");
        }
        
        com.squareup.okhttp.Call call = approveAllCall(xChainId, contractAddressOrAlias, body, xKrn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve/Deny Transfers of All Token
     * Grant or deny authorization to &#x60;to&#x60; to send all tokens owned by &#x60;from&#x60; in a specified contract.&lt;p&gt;&lt;/p&gt;   You will see in &#x60;Submitted&#x60; in the response even when you enter the wrong address or token ID, or when the &#x60;from&#x60; and &#x60;owner&#x60; are different. But that does not mean that it is successfully &#x60;Committed&#x60;). To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse approveAll(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, String xKrn) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = approveAllWithHttpInfo(xChainId, contractAddressOrAlias, body, xKrn);
        return resp.getData();
    }

    /**
     * Approve/Deny Transfers of All Token
     * Grant or deny authorization to &#x60;to&#x60; to send all tokens owned by &#x60;from&#x60; in a specified contract.&lt;p&gt;&lt;/p&gt;   You will see in &#x60;Submitted&#x60; in the response even when you enter the wrong address or token ID, or when the &#x60;from&#x60; and &#x60;owner&#x60; are different. But that does not mean that it is successfully &#x60;Committed&#x60;). To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> approveAllWithHttpInfo(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = approveAllValidateBeforeCall(xChainId, contractAddressOrAlias, body, xKrn, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve/Deny Transfers of All Token (asynchronously)
     * Grant or deny authorization to &#x60;to&#x60; to send all tokens owned by &#x60;from&#x60; in a specified contract.&lt;p&gt;&lt;/p&gt;   You will see in &#x60;Submitted&#x60; in the response even when you enter the wrong address or token ID, or when the &#x60;from&#x60; and &#x60;owner&#x60; are different. But that does not mean that it is successfully &#x60;Committed&#x60;). To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveAllAsync(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, String xKrn, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveAllValidateBeforeCall(xChainId, contractAddressOrAlias, body, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for approveToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token that the &#x60;to&#x60; will be authorized to send. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/approve/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling approveToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling approveToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling approveToken(Async)");
        }
        
        com.squareup.okhttp.Call call = approveTokenCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve/Deny Authorization for Token Transfers
     * Grant or deny authorization to &#x60;to&#x60; to send a specified token. To deny authorization, enter &#x60;0x0000000000000000000000000000000000000000&#x60; for &#x60;to&#x60;.   You will see in &#x60;Submitted&#x60; in the response even when you enter the wrong token ID, the &#x60;from&#x60; and &#x60;owner&#x60; are differet. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;  ##### From  &#x60;from&#x60; is the address that sends the transaction. If &#x60;from&#x60; is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token that the &#x60;to&#x60; will be authorized to send. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse approveToken(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, String xKrn) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = approveTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, body, xKrn);
        return resp.getData();
    }

    /**
     * Approve/Deny Authorization for Token Transfers
     * Grant or deny authorization to &#x60;to&#x60; to send a specified token. To deny authorization, enter &#x60;0x0000000000000000000000000000000000000000&#x60; for &#x60;to&#x60;.   You will see in &#x60;Submitted&#x60; in the response even when you enter the wrong token ID, the &#x60;from&#x60; and &#x60;owner&#x60; are differet. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;  ##### From  &#x60;from&#x60; is the address that sends the transaction. If &#x60;from&#x60; is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token that the &#x60;to&#x60; will be authorized to send. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> approveTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve/Deny Authorization for Token Transfers (asynchronously)
     * Grant or deny authorization to &#x60;to&#x60; to send a specified token. To deny authorization, enter &#x60;0x0000000000000000000000000000000000000000&#x60; for &#x60;to&#x60;.   You will see in &#x60;Submitted&#x60; in the response even when you enter the wrong token ID, the &#x60;from&#x60; and &#x60;owner&#x60; are differet. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;  ##### From  &#x60;from&#x60; is the address that sends the transaction. If &#x60;from&#x60; is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token that the &#x60;to&#x60; will be authorized to send. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, String xKrn, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for burnToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token to burn. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call burnTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call burnTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling burnToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling burnToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling burnToken(Async)");
        }
        
        com.squareup.okhttp.Call call = burnTokenCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Burn Token
     * Burns a token.   You will see &#x60;Submitted&#x60; in the response even when you enter the wrong token ID, the &#x60;from&#x60; and &#x60;owner&#x60; are different, or when &#x60;from&#x60; is not authorized to burn the token. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;   ##### From &#x60;from&#x60; is the address that sends the transaction. If &#x60;from&#x60; is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;). 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token to burn. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse burnToken(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, String xKrn) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = burnTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, body, xKrn);
        return resp.getData();
    }

    /**
     * Burn Token
     * Burns a token.   You will see &#x60;Submitted&#x60; in the response even when you enter the wrong token ID, the &#x60;from&#x60; and &#x60;owner&#x60; are different, or when &#x60;from&#x60; is not authorized to burn the token. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;   ##### From &#x60;from&#x60; is the address that sends the transaction. If &#x60;from&#x60; is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;). 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token to burn. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> burnTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Burn Token (asynchronously)
     * Burns a token.   You will see &#x60;Submitted&#x60; in the response even when you enter the wrong token ID, the &#x60;from&#x60; and &#x60;owner&#x60; are different, or when &#x60;from&#x60; is not authorized to burn the token. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).&lt;p&gt;&lt;/p&gt;   ##### From &#x60;from&#x60; is the address that sends the transaction. If &#x60;from&#x60; is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;). 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the token to burn. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call burnTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, String xKrn, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOwnerTokens
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param ownerAddress Address of the token owner (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOwnerTokensCall(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/owner/{owner-address}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "owner-address" + "\\}", apiClient.escapeString(ownerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOwnerTokensValidateBeforeCall(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getOwnerTokens(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getOwnerTokens(Async)");
        }
        // verify the required parameter 'ownerAddress' is set
        if (ownerAddress == null) {
            throw new ApiException("Missing the required parameter 'ownerAddress' when calling getOwnerTokens(Async)");
        }
        
        com.squareup.okhttp.Call call = getOwnerTokensCall(xChainId, contractAddressOrAlias, ownerAddress, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Tokens by Address
     * Returns a list of all tokens existent for a contract.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param ownerAddress Address of the token owner (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @return GetOwnerKip17TokensResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOwnerKip17TokensResponse getOwnerTokens(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor) throws ApiException {
        ApiResponse<GetOwnerKip17TokensResponse> resp = getOwnerTokensWithHttpInfo(xChainId, contractAddressOrAlias, ownerAddress, size, cursor);
        return resp.getData();
    }

    /**
     * List Tokens by Address
     * Returns a list of all tokens existent for a contract.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param ownerAddress Address of the token owner (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @return ApiResponse&lt;GetOwnerKip17TokensResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOwnerKip17TokensResponse> getOwnerTokensWithHttpInfo(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getOwnerTokensValidateBeforeCall(xChainId, contractAddressOrAlias, ownerAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<GetOwnerKip17TokensResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tokens by Address (asynchronously)
     * Returns a list of all tokens existent for a contract.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param ownerAddress Address of the token owner (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOwnerTokensAsync(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor, final ApiCallback<GetOwnerKip17TokensResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOwnerTokensValidateBeforeCall(xChainId, contractAddressOrAlias, ownerAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOwnerKip17TokensResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the desired token. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getToken(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenCall(xChainId, contractAddressOrAlias, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Token Data
     * Returns the data of a specified token. You can use the contract alias in place of the address.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the desired token. (required)
     * @return GetKip17TokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetKip17TokenResponse getToken(String xChainId, String contractAddressOrAlias, String tokenId) throws ApiException {
        ApiResponse<GetKip17TokenResponse> resp = getTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId);
        return resp.getData();
    }

    /**
     * Get Token Data
     * Returns the data of a specified token. You can use the contract alias in place of the address.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the desired token. (required)
     * @return ApiResponse&lt;GetKip17TokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetKip17TokenResponse> getTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = getTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, null, null);
        Type localVarReturnType = new TypeToken<GetKip17TokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Token Data (asynchronously)
     * Returns the data of a specified token. You can use the contract alias in place of the address.&lt;p&gt;&lt;/p&gt;
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId The ID of the desired token. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, final ApiCallback<GetKip17TokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetKip17TokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTokenHistory
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenHistoryCall(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}/history"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenHistoryValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTokenHistory(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getTokenHistory(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getTokenHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenHistoryCall(xChainId, contractAddressOrAlias, tokenId, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Token Ownership History
     * Returns the transaction history of a specified token from the time it was minted. Each item in the response represents a transfer.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @return GetKip17TokenHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetKip17TokenHistoryResponse getTokenHistory(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor) throws ApiException {
        ApiResponse<GetKip17TokenHistoryResponse> resp = getTokenHistoryWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, size, cursor);
        return resp.getData();
    }

    /**
     * Get Token Ownership History
     * Returns the transaction history of a specified token from the time it was minted. Each item in the response represents a transfer.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @return ApiResponse&lt;GetKip17TokenHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetKip17TokenHistoryResponse> getTokenHistoryWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getTokenHistoryValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<GetKip17TokenHistoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Token Ownership History (asynchronously)
     * Returns the transaction history of a specified token from the time it was minted. Each item in the response represents a transfer.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenHistoryAsync(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor, final ApiCallback<GetKip17TokenHistoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenHistoryValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetKip17TokenHistoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTokens
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTokensCall(String xChainId, String contractAddressOrAlias, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTokensValidateBeforeCall(String xChainId, String contractAddressOrAlias, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling listTokens(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling listTokens(Async)");
        }
        
        com.squareup.okhttp.Call call = listTokensCall(xChainId, contractAddressOrAlias, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Token List
     * Returns a list of all tokens minted from a specified KIP-17 contract. You can use the contract alias in place of the address.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @return Kip17TokenListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TokenListResponse listTokens(String xChainId, String contractAddressOrAlias, Long size, String cursor) throws ApiException {
        ApiResponse<Kip17TokenListResponse> resp = listTokensWithHttpInfo(xChainId, contractAddressOrAlias, size, cursor);
        return resp.getData();
    }

    /**
     * Get Token List
     * Returns a list of all tokens minted from a specified KIP-17 contract. You can use the contract alias in place of the address.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @return ApiResponse&lt;Kip17TokenListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TokenListResponse> listTokensWithHttpInfo(String xChainId, String contractAddressOrAlias, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = listTokensValidateBeforeCall(xChainId, contractAddressOrAlias, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<Kip17TokenListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Token List (asynchronously)
     * Returns a list of all tokens minted from a specified KIP-17 contract. You can use the contract alias in place of the address.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param size The number of items to return (min&#x3D;1, max&#x3D;1000, default&#x3D;100). (optional)
     * @param cursor The pointer for the next request, after which the result will be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTokensAsync(String xChainId, String contractAddressOrAlias, Long size, String cursor, final ApiCallback<Kip17TokenListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTokensValidateBeforeCall(xChainId, contractAddressOrAlias, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TokenListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mintToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mintTokenCall(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mintTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling mintToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling mintToken(Async)");
        }
        
        com.squareup.okhttp.Call call = mintTokenCall(xChainId, contractAddressOrAlias, body, xKrn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mint Token
     * Mints a new token from a specified KIP-17 contract. You can use the contract alias in place of the address.  &gt; **NOTE**  &gt; &gt; Minting a token to an address outside the KAS Account Pool hinders you from sending or burning the token using KAS..
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse mintToken(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, String xKrn) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = mintTokenWithHttpInfo(xChainId, contractAddressOrAlias, body, xKrn);
        return resp.getData();
    }

    /**
     * Mint Token
     * Mints a new token from a specified KIP-17 contract. You can use the contract alias in place of the address.  &gt; **NOTE**  &gt; &gt; Minting a token to an address outside the KAS Account Pool hinders you from sending or burning the token using KAS..
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> mintTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, xKrn, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mint Token (asynchronously)
     * Mints a new token from a specified KIP-17 contract. You can use the contract alias in place of the address.  &gt; **NOTE**  &gt; &gt; Minting a token to an address outside the KAS Account Pool hinders you from sending or burning the token using KAS..
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mintTokenAsync(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, String xKrn, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transferToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling transferToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling transferToken(Async)");
        }
        
        com.squareup.okhttp.Call call = transferTokenCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Transfer Token
     * Sends a token to a specified address. If the token has a different &#x60;sender&#x60; and &#x60;owner&#x60;, the &#x60;sender&#x60; must be authorized to send the token. You can authorize an account to send tokens via [v1/contract/{contract-address-or-alias}/approve/{token-id}](#operation/ApproveToken).&lt;p&gt;&lt;/p&gt;   You will see &#x60;Submitted&#x60; in the response even when you enter a wrong token ID. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).   ##### Sender  &#x60;sender&#x60; is the address that sends the transaction. If it is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse transferToken(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, String xKrn) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = transferTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, body, xKrn);
        return resp.getData();
    }

    /**
     * Transfer Token
     * Sends a token to a specified address. If the token has a different &#x60;sender&#x60; and &#x60;owner&#x60;, the &#x60;sender&#x60; must be authorized to send the token. You can authorize an account to send tokens via [v1/contract/{contract-address-or-alias}/approve/{token-id}](#operation/ApproveToken).&lt;p&gt;&lt;/p&gt;   You will see &#x60;Submitted&#x60; in the response even when you enter a wrong token ID. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).   ##### Sender  &#x60;sender&#x60; is the address that sends the transaction. If it is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> transferTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transfer Token (asynchronously)
     * Sends a token to a specified address. If the token has a different &#x60;sender&#x60; and &#x60;owner&#x60;, the &#x60;sender&#x60; must be authorized to send the token. You can authorize an account to send tokens via [v1/contract/{contract-address-or-alias}/approve/{token-id}](#operation/ApproveToken).&lt;p&gt;&lt;/p&gt;   You will see &#x60;Submitted&#x60; in the response even when you enter a wrong token ID. But that does not mean that it is successfully &#x60;Committed&#x60;. To confirm transaction status, use Get Transaction Receipt from the Wallet API [/v2/tx/{transaction-hash}](https://refs.klaytnapi.com/en/wallet/latest#operation/TransactionReceipt).   ##### Sender  &#x60;sender&#x60; is the address that sends the transaction. If it is an account in the default &#x60;account-pool&#x60; of KIP-17 or Wallet Service, you can omit the KRN header. &lt;br /&gt; Otherwise you need to include the KRN header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hex.) or alias. (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @param xKrn KRN (KAS Resource Name) unique to an Account Pool (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, String xKrn, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
