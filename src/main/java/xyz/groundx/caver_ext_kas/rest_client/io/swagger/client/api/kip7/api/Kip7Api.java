/*
 * KIP-7 API
 * # Introduction KIP-7 API is a RESTful API for managing KIP-7 contracts and tokens that follow the [KIP-7 Fungible Token Standard](https://kips.klaytn.com/KIPs/kip-7).   You can deploy contracts and send tokens using the default contract managing account (`deployer`) and an `alias`. And by using SDK like caver,  you can manage your contracts and tokens using [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) for contracts created on the Klaytn Network.     # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |  | 1130050 | incorrect request; spender 1130107 | incorrect bookmark 1134410 | invalid address; to</br>invalid address; owner</br>invalid address; address 1134411 | invalid amount; amount |  ## 404: Not Found   | Code | Messages |  | --- | --- |  | 1134504 | contract not found 1134506 | deployer not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1134900 | duplicate alias 1134902 | contract already paused 1134903 | contract already unpaused |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.ApproveKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.BurnFromKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.BurnKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.DeployKip7ContractRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7ContractListResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7ContractMetadataResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7TokenBalanceResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.Kip7TransactionStatusResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.MintKip7TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.TransferKip7TokenFromRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip7.model.TransferKip7TokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Kip7Api {
    private ApiClient apiClient;

    public Kip7Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Kip7Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for approveToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveTokenCall(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/approve"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling approveToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling approveToken(Async)");
        }
        
        com.squareup.okhttp.Call call = approveTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve KIP-7 token transfer
     * Authorizes the &#x60;spender&#x60; to send a certain amount of tokens on behalf of the &#x60;owner&#x60;.  You can execute a delegated token transfer by calling [/v1/contract/{contract-address-or-alias}/transfer-from](#opera ion/TransferFromToken) API.<p></p>  **Note**: Only a &#x60;spender&#x60; account address managed by Wallet API can execute delegated token transfers.  <br> **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;owner&#x60; account - Just as in other APIs, not including the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse approveToken(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = approveTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Approve KIP-7 token transfer
     * Authorizes the &#x60;spender&#x60; to send a certain amount of tokens on behalf of the &#x60;owner&#x60;.  You can execute a delegated token transfer by calling [/v1/contract/{contract-address-or-alias}/transfer-from](#opera ion/TransferFromToken) API.<p></p>  **Note**: Only a &#x60;spender&#x60; account address managed by Wallet API can execute delegated token transfers.  <br> **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;owner&#x60; account - Just as in other APIs, not including the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> approveTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve KIP-7 token transfer (asynchronously)
     * Authorizes the &#x60;spender&#x60; to send a certain amount of tokens on behalf of the &#x60;owner&#x60;.  You can execute a delegated token transfer by calling [/v1/contract/{contract-address-or-alias}/transfer-from](#opera ion/TransferFromToken) API.<p></p>  **Note**: Only a &#x60;spender&#x60; account address managed by Wallet API can execute delegated token transfers.  <br> **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;owner&#x60; account - Just as in other APIs, not including the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveTokenAsync(String xChainId, String contractAddressOrAlias, ApproveKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for burnFromToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call burnFromTokenCall(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/burn-from"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call burnFromTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling burnFromToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling burnFromToken(Async)");
        }
        
        com.squareup.okhttp.Call call = burnFromTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Burn approved KIP-7 tokens
     *  &#x60;spender&#x60; burns &#x60;owner&#x60;&#x27;s tokens on the&#x60;owner&#x60;&#x27;s behalf. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;spender&#x60; account   - Just as in other APIs, not including the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse burnFromToken(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = burnFromTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Burn approved KIP-7 tokens
     *  &#x60;spender&#x60; burns &#x60;owner&#x60;&#x27;s tokens on the&#x60;owner&#x60;&#x27;s behalf. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;spender&#x60; account   - Just as in other APIs, not including the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> burnFromTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = burnFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Burn approved KIP-7 tokens (asynchronously)
     *  &#x60;spender&#x60; burns &#x60;owner&#x60;&#x27;s tokens on the&#x60;owner&#x60;&#x27;s behalf. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;spender&#x60; account   - Just as in other APIs, not including the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call burnFromTokenAsync(String xChainId, String contractAddressOrAlias, BurnFromKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = burnFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for burnToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call burnTokenCall(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/burn"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call burnTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling burnToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling burnToken(Async)");
        }
        
        com.squareup.okhttp.Call call = burnTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Burn KIP-7 tokens
     * Burns tokens. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse burnToken(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = burnTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Burn KIP-7 tokens
     * Burns tokens. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> burnTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Burn KIP-7 tokens (asynchronously)
     * Burns tokens. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call burnTokenAsync(String xChainId, String contractAddressOrAlias, BurnKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployContract
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployContractCall(String xChainId, DeployKip7ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployContractValidateBeforeCall(String xChainId, DeployKip7ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling deployContract(Async)");
        }
        
        com.squareup.okhttp.Call call = deployContractCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploy KIP-7 contract
     * Deploys a standard KIP-7 contract based on the data provided. The contract will be deployed via the default contract management account. You cannot change the deployer.   You can retrieve the default contract management accounts via [/v1/deployer/default](#operation/GetDefaultDeployer).   Your &#x60;alias&#x60; must only contain lowercase alphabets, numbers and hyphens and begin with an alphabet. <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse deployContract(String xChainId, DeployKip7ContractRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = deployContractWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * Deploy KIP-7 contract
     * Deploys a standard KIP-7 contract based on the data provided. The contract will be deployed via the default contract management account. You cannot change the deployer.   You can retrieve the default contract management accounts via [/v1/deployer/default](#operation/GetDefaultDeployer).   Your &#x60;alias&#x60; must only contain lowercase alphabets, numbers and hyphens and begin with an alphabet. <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> deployContractWithHttpInfo(String xChainId, DeployKip7ContractRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deployContractValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy KIP-7 contract (asynchronously)
     * Deploys a standard KIP-7 contract based on the data provided. The contract will be deployed via the default contract management account. You cannot change the deployer.   You can retrieve the default contract management accounts via [/v1/deployer/default](#operation/GetDefaultDeployer).   Your &#x60;alias&#x60; must only contain lowercase alphabets, numbers and hyphens and begin with an alphabet. <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployContractAsync(String xChainId, DeployKip7ContractRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployContractValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContract
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getContract(Async)");
        }
        
        com.squareup.okhttp.Call call = getContractCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get KIP-7 contract data
     * Returns contract data of the given alias or contract address. <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @return Kip7ContractMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7ContractMetadataResponse getContract(String xChainId, String contractAddressOrAlias) throws ApiException {
        ApiResponse<Kip7ContractMetadataResponse> resp = getContractWithHttpInfo(xChainId, contractAddressOrAlias);
        return resp.getData();
    }

    /**
     * Get KIP-7 contract data
     * Returns contract data of the given alias or contract address. <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @return ApiResponse&lt;Kip7ContractMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7ContractMetadataResponse> getContractWithHttpInfo(String xChainId, String contractAddressOrAlias) throws ApiException {
        com.squareup.okhttp.Call call = getContractValidateBeforeCall(xChainId, contractAddressOrAlias, null, null);
        Type localVarReturnType = new TypeToken<Kip7ContractMetadataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get KIP-7 contract data (asynchronously)
     * Returns contract data of the given alias or contract address. <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractAsync(String xChainId, String contractAddressOrAlias, final ApiCallback<Kip7ContractMetadataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContractValidateBeforeCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7ContractMetadataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTokenAllowance
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Token owner&#x27;s Klaytn account address (required)
     * @param spender  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenAllowanceCall(String xChainId, String contractAddressOrAlias, String owner, String spender, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/account/{owner}/allowance/{spender}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "spender" + "\\}", apiClient.escapeString(spender.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenAllowanceValidateBeforeCall(String xChainId, String contractAddressOrAlias, String owner, String spender, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTokenAllowance(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getTokenAllowance(Async)");
        }
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTokenAllowance(Async)");
        }
        // verify the required parameter 'spender' is set
        if (spender == null) {
            throw new ApiException("Missing the required parameter 'spender' when calling getTokenAllowance(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenAllowanceCall(xChainId, contractAddressOrAlias, owner, spender, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the amount of approved KIP-7 tokens
     * Shows the amount of tokens approved to the &#x60;spender&#x60; by the &#x60;owner&#x60;.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Token owner&#x27;s Klaytn account address (required)
     * @param spender  (required)
     * @return Kip7TokenBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TokenBalanceResponse getTokenAllowance(String xChainId, String contractAddressOrAlias, String owner, String spender) throws ApiException {
        ApiResponse<Kip7TokenBalanceResponse> resp = getTokenAllowanceWithHttpInfo(xChainId, contractAddressOrAlias, owner, spender);
        return resp.getData();
    }

    /**
     * Returns the amount of approved KIP-7 tokens
     * Shows the amount of tokens approved to the &#x60;spender&#x60; by the &#x60;owner&#x60;.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Token owner&#x27;s Klaytn account address (required)
     * @param spender  (required)
     * @return ApiResponse&lt;Kip7TokenBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TokenBalanceResponse> getTokenAllowanceWithHttpInfo(String xChainId, String contractAddressOrAlias, String owner, String spender) throws ApiException {
        com.squareup.okhttp.Call call = getTokenAllowanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, spender, null, null);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the amount of approved KIP-7 tokens (asynchronously)
     * Shows the amount of tokens approved to the &#x60;spender&#x60; by the &#x60;owner&#x60;.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Token owner&#x27;s Klaytn account address (required)
     * @param spender  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenAllowanceAsync(String xChainId, String contractAddressOrAlias, String owner, String spender, final ApiCallback<Kip7TokenBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenAllowanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, spender, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTokenBalance
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Klaytn account address to query balance (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenBalanceCall(String xChainId, String contractAddressOrAlias, String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/account/{owner}/balance"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenBalanceValidateBeforeCall(String xChainId, String contractAddressOrAlias, String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTokenBalance(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getTokenBalance(Async)");
        }
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTokenBalance(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenBalanceCall(xChainId, contractAddressOrAlias, owner, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get KIP-7 token balance
     * Shows the&#x60;{owner}&#x60;&#x27;s balance for the given KIP-7 contract.  <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Klaytn account address to query balance (required)
     * @return Kip7TokenBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TokenBalanceResponse getTokenBalance(String xChainId, String contractAddressOrAlias, String owner) throws ApiException {
        ApiResponse<Kip7TokenBalanceResponse> resp = getTokenBalanceWithHttpInfo(xChainId, contractAddressOrAlias, owner);
        return resp.getData();
    }

    /**
     * Get KIP-7 token balance
     * Shows the&#x60;{owner}&#x60;&#x27;s balance for the given KIP-7 contract.  <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Klaytn account address to query balance (required)
     * @return ApiResponse&lt;Kip7TokenBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TokenBalanceResponse> getTokenBalanceWithHttpInfo(String xChainId, String contractAddressOrAlias, String owner) throws ApiException {
        com.squareup.okhttp.Call call = getTokenBalanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, null, null);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get KIP-7 token balance (asynchronously)
     * Shows the&#x60;{owner}&#x60;&#x27;s balance for the given KIP-7 contract.  <p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param owner Klaytn account address to query balance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenBalanceAsync(String xChainId, String contractAddressOrAlias, String owner, final ApiCallback<Kip7TokenBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenBalanceValidateBeforeCall(xChainId, contractAddressOrAlias, owner, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TokenBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listContractsInDeployerPool
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param size The maximum number of items to return (optional)
     * @param cursor Offset for the first item. You can query data after the given offset using the &#x60;cursor&#x60; value returned in the response. (optional)
     * @param status You can only choose one deploy status [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;] for the contract you wish to query. The default value is &#x60;all&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listContractsInDeployerPoolCall(String xChainId, String size, String cursor, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listContractsInDeployerPoolValidateBeforeCall(String xChainId, String size, String cursor, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling listContractsInDeployerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = listContractsInDeployerPoolCall(xChainId, size, cursor, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a list of KIP-7 contracts
     * Retrieves a list of all KIP-7 contracts deployed by the user. The contracts will be listed in descending order of transactions requested for creation.<p></p>  The &#x60;status&#x60; field in the response has one of the following values.<p></p>  - &#x60;init&#x60;: The initial status before sending the transaction - &#x60;submitted&#x60;: The status of having submitted the contract deploy transaction - &#x60;deployed&#x60;: The status of having deployed the contract<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param size The maximum number of items to return (optional)
     * @param cursor Offset for the first item. You can query data after the given offset using the &#x60;cursor&#x60; value returned in the response. (optional)
     * @param status You can only choose one deploy status [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;] for the contract you wish to query. The default value is &#x60;all&#x60;. (optional)
     * @return Kip7ContractListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7ContractListResponse listContractsInDeployerPool(String xChainId, String size, String cursor, String status) throws ApiException {
        ApiResponse<Kip7ContractListResponse> resp = listContractsInDeployerPoolWithHttpInfo(xChainId, size, cursor, status);
        return resp.getData();
    }

    /**
     * Retrieves a list of KIP-7 contracts
     * Retrieves a list of all KIP-7 contracts deployed by the user. The contracts will be listed in descending order of transactions requested for creation.<p></p>  The &#x60;status&#x60; field in the response has one of the following values.<p></p>  - &#x60;init&#x60;: The initial status before sending the transaction - &#x60;submitted&#x60;: The status of having submitted the contract deploy transaction - &#x60;deployed&#x60;: The status of having deployed the contract<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param size The maximum number of items to return (optional)
     * @param cursor Offset for the first item. You can query data after the given offset using the &#x60;cursor&#x60; value returned in the response. (optional)
     * @param status You can only choose one deploy status [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;] for the contract you wish to query. The default value is &#x60;all&#x60;. (optional)
     * @return ApiResponse&lt;Kip7ContractListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7ContractListResponse> listContractsInDeployerPoolWithHttpInfo(String xChainId, String size, String cursor, String status) throws ApiException {
        com.squareup.okhttp.Call call = listContractsInDeployerPoolValidateBeforeCall(xChainId, size, cursor, status, null, null);
        Type localVarReturnType = new TypeToken<Kip7ContractListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a list of KIP-7 contracts (asynchronously)
     * Retrieves a list of all KIP-7 contracts deployed by the user. The contracts will be listed in descending order of transactions requested for creation.<p></p>  The &#x60;status&#x60; field in the response has one of the following values.<p></p>  - &#x60;init&#x60;: The initial status before sending the transaction - &#x60;submitted&#x60;: The status of having submitted the contract deploy transaction - &#x60;deployed&#x60;: The status of having deployed the contract<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param size The maximum number of items to return (optional)
     * @param cursor Offset for the first item. You can query data after the given offset using the &#x60;cursor&#x60; value returned in the response. (optional)
     * @param status You can only choose one deploy status [&#x60;all&#x60;,&#x60;init&#x60;,&#x60;submitted&#x60;,&#x60;deployed&#x60;] for the contract you wish to query. The default value is &#x60;all&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listContractsInDeployerPoolAsync(String xChainId, String size, String cursor, String status, final ApiCallback<Kip7ContractListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listContractsInDeployerPoolValidateBeforeCall(xChainId, size, cursor, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7ContractListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mintToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mintTokenCall(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/mint"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mintTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling mintToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling mintToken(Async)");
        }
        
        com.squareup.okhttp.Call call = mintTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mint KIP-7 tokens
     * Mints a new token for a given user.   The total supply in the contract (&#x60;totalSupply&#x60;) will increase as requested.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or alias (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse mintToken(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = mintTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Mint KIP-7 tokens
     * Mints a new token for a given user.   The total supply in the contract (&#x60;totalSupply&#x60;) will increase as requested.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> mintTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mint KIP-7 tokens (asynchronously)
     * Mints a new token for a given user.   The total supply in the contract (&#x60;totalSupply&#x60;) will increase as requested.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mintTokenAsync(String xChainId, String contractAddressOrAlias, MintKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pauseContract
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pauseContractCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/pause"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pauseContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling pauseContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling pauseContract(Async)");
        }
        
        com.squareup.okhttp.Call call = pauseContractCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pause KIP-7 contract
     * Pauses all token transfers and validations for a given contract.  You can resume token transfers by using [/v1/{contract-address-or-alias}/unpause](#operation/UnpauseContract).<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse pauseContract(String xChainId, String contractAddressOrAlias) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = pauseContractWithHttpInfo(xChainId, contractAddressOrAlias);
        return resp.getData();
    }

    /**
     * Pause KIP-7 contract
     * Pauses all token transfers and validations for a given contract.  You can resume token transfers by using [/v1/{contract-address-or-alias}/unpause](#operation/UnpauseContract).<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> pauseContractWithHttpInfo(String xChainId, String contractAddressOrAlias) throws ApiException {
        com.squareup.okhttp.Call call = pauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pause KIP-7 contract (asynchronously)
     * Pauses all token transfers and validations for a given contract.  You can resume token transfers by using [/v1/{contract-address-or-alias}/unpause](#operation/UnpauseContract).<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pauseContractAsync(String xChainId, String contractAddressOrAlias, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferFromToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferFromTokenCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/transfer-from"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferFromTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transferFromToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling transferFromToken(Async)");
        }
        
        com.squareup.okhttp.Call call = transferFromTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delegated KIP-7 token transfer
     * Sends tokens on behalf of the owner.  You need to approve token transfers in advance ([/v1/{contract-address-or-alias}/approve](#operation/ApproveToken)).  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;spender&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse transferFromToken(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = transferFromTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Delegated KIP-7 token transfer
     * Sends tokens on behalf of the owner.  You need to approve token transfers in advance ([/v1/{contract-address-or-alias}/approve](#operation/ApproveToken)).  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;spender&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> transferFromTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body) throws ApiException {
        com.squareup.okhttp.Call call = transferFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delegated KIP-7 token transfer (asynchronously)
     * Sends tokens on behalf of the owner.  You need to approve token transfers in advance ([/v1/{contract-address-or-alias}/approve](#operation/ApproveToken)).  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;spender&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferFromTokenAsync(String xChainId, String contractAddressOrAlias, TransferKip7TokenFromRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferFromTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferToken
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferTokenCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/transfer"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transferToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling transferToken(Async)");
        }
        
        com.squareup.okhttp.Call call = transferTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * KIP-7 token transfer
     * Sends tokens of the contract.  If &#x60;from&#x60; is not specified in the request, the sender will be the &#x60;deployer&#x60; of the contract.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse transferToken(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = transferTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * KIP-7 token transfer
     * Sends tokens of the contract.  If &#x60;from&#x60; is not specified in the request, the sender will be the &#x60;deployer&#x60; of the contract.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> transferTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * KIP-7 token transfer (asynchronously)
     * Sends tokens of the contract.  If &#x60;from&#x60; is not specified in the request, the sender will be the &#x60;deployer&#x60; of the contract.  <p></p>  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferTokenAsync(String xChainId, String contractAddressOrAlias, TransferKip7TokenRequest body, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unpauseContract
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unpauseContractCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/unpause"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unpauseContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling unpauseContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling unpauseContract(Async)");
        }
        
        com.squareup.okhttp.Call call = unpauseContractCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resume KIP-7 contract
     * Resumes token transfers and validations for a given contract.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @return Kip7TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip7TransactionStatusResponse unpauseContract(String xChainId, String contractAddressOrAlias) throws ApiException {
        ApiResponse<Kip7TransactionStatusResponse> resp = unpauseContractWithHttpInfo(xChainId, contractAddressOrAlias);
        return resp.getData();
    }

    /**
     * Resume KIP-7 contract
     * Resumes token transfers and validations for a given contract.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @return ApiResponse&lt;Kip7TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip7TransactionStatusResponse> unpauseContractWithHttpInfo(String xChainId, String contractAddressOrAlias) throws ApiException {
        com.squareup.okhttp.Call call = unpauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, null, null);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resume KIP-7 contract (asynchronously)
     * Resumes token transfers and validations for a given contract.<p></p>  
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unpauseContractAsync(String xChainId, String contractAddressOrAlias, final ApiCallback<Kip7TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unpauseContractValidateBeforeCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip7TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
