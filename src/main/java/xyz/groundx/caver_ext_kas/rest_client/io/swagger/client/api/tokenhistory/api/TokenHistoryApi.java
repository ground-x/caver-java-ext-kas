/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.PageableTransfers;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.Transfers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenHistoryApi {
    private ApiClient apiClient;

    public TokenHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenHistoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTransfers
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to be used for query, Preset ID can be found on KAS Console (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified (optional)
     * @param range Set range (block number or unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true (default&#x3D;false) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransfersCall(String xChainId, String presets, String kind, String range, Long size, String cursor, String excludeZeroKlay, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (excludeZeroKlay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude-zero-klay", excludeZeroKlay));
        if (presets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presets", presets));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransfersValidateBeforeCall(String xChainId, String presets, String kind, String range, Long size, String cursor, String excludeZeroKlay, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTransfers(Async)");
        }
        // verify the required parameter 'presets' is set
        if (presets == null) {
            throw new ApiException("Missing the required parameter 'presets' when calling getTransfers(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransfersCall(xChainId, presets, kind, range, size, cursor, excludeZeroKlay, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query received and sent transfers of tokens
     * Query all transaction history. Transaction history is divided into KLAY Transfer (&#x60;KlayTransfer&#x60;), FT Transfer (&#x60;FtTransfer&#x60;), NFT Transfer (&#x60;NftTransfer&#x60;), and MT Transfer (&#x60;MtTransfer&#x60;). <p></p>  ## KlayTransfer in FT/NFT/MT transactions <p></p>  For transfers of FTs, NFTs, or MTs, &#x60;KlayTransfer&#x60; history will also be included in the query result. This is because FT/NFT/MT transfers are essentially execution of a corresponding contract function, and the response for the transfer includes &#x60;KlayTransfer&#x60;, which is equivalent to the transaction for sending KLAY. Since most transactions that execute contract functions do not usually send KLAY, the &#x60;value&#x60; of &#x60;KlayTransfer&#x60; that transfered NT, NFT, and MT may be zero. By using the &#x60;exclude-zero-klay&#x3D;true&#x60; query, &#x60;KlayTransfer&#x60; can be excluded. <p></p>  ## Transaction type<p></p>  * You can choose KLAY, FT, NFT or MT by setting &#x60;kind&#x60; parameter to get transaction history of a certain type or a combination of types.<br> * If you don&#x27;t set the &#x60;kind&#x60; parameter, all transaction types will be returned.<p></p><br>  ## Date range<p></p>  * &#x60;range&#x60; is queried in the form of &#x60;range&#x3D;{from},{to}&#x60;<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for &#x60;{to}&#x60;, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both Unix time and block number)<p></p><br>  ## Preset<p></p>  Preset is a collection of EOA and FT, NFT and MT contracts. You can use it to repetitively retrieve transaction history for certain accounts quickly and easily.<p></p>  * The parameter &#x60;presets&#x60; is a required parameter.<br> * [Preset](https://console.klaytnapi.com/en/service/th/preset/list) needs to be created on KAS Console in advance.<br> * You can check your Preset ID on KAS Console. For more information please visit [Preset](https://docs.klaytnapi.com/v/en/tutorial/th-api/th-api-token-history#preset).<p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value.<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to be used for query, Preset ID can be found on KAS Console (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified (optional)
     * @param range Set range (block number or unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true (default&#x3D;false) (optional)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers getTransfers(String xChainId, String presets, String kind, String range, Long size, String cursor, String excludeZeroKlay) throws ApiException {
        ApiResponse<PageableTransfers> resp = getTransfersWithHttpInfo(xChainId, presets, kind, range, size, cursor, excludeZeroKlay);
        return resp.getData();
    }

    /**
     * Query received and sent transfers of tokens
     * Query all transaction history. Transaction history is divided into KLAY Transfer (&#x60;KlayTransfer&#x60;), FT Transfer (&#x60;FtTransfer&#x60;), NFT Transfer (&#x60;NftTransfer&#x60;), and MT Transfer (&#x60;MtTransfer&#x60;). <p></p>  ## KlayTransfer in FT/NFT/MT transactions <p></p>  For transfers of FTs, NFTs, or MTs, &#x60;KlayTransfer&#x60; history will also be included in the query result. This is because FT/NFT/MT transfers are essentially execution of a corresponding contract function, and the response for the transfer includes &#x60;KlayTransfer&#x60;, which is equivalent to the transaction for sending KLAY. Since most transactions that execute contract functions do not usually send KLAY, the &#x60;value&#x60; of &#x60;KlayTransfer&#x60; that transfered NT, NFT, and MT may be zero. By using the &#x60;exclude-zero-klay&#x3D;true&#x60; query, &#x60;KlayTransfer&#x60; can be excluded. <p></p>  ## Transaction type<p></p>  * You can choose KLAY, FT, NFT or MT by setting &#x60;kind&#x60; parameter to get transaction history of a certain type or a combination of types.<br> * If you don&#x27;t set the &#x60;kind&#x60; parameter, all transaction types will be returned.<p></p><br>  ## Date range<p></p>  * &#x60;range&#x60; is queried in the form of &#x60;range&#x3D;{from},{to}&#x60;<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for &#x60;{to}&#x60;, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both Unix time and block number)<p></p><br>  ## Preset<p></p>  Preset is a collection of EOA and FT, NFT and MT contracts. You can use it to repetitively retrieve transaction history for certain accounts quickly and easily.<p></p>  * The parameter &#x60;presets&#x60; is a required parameter.<br> * [Preset](https://console.klaytnapi.com/en/service/th/preset/list) needs to be created on KAS Console in advance.<br> * You can check your Preset ID on KAS Console. For more information please visit [Preset](https://docs.klaytnapi.com/v/en/tutorial/th-api/th-api-token-history#preset).<p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value.<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to be used for query, Preset ID can be found on KAS Console (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified (optional)
     * @param range Set range (block number or unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true (default&#x3D;false) (optional)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> getTransfersWithHttpInfo(String xChainId, String presets, String kind, String range, Long size, String cursor, String excludeZeroKlay) throws ApiException {
        com.squareup.okhttp.Call call = getTransfersValidateBeforeCall(xChainId, presets, kind, range, size, cursor, excludeZeroKlay, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query received and sent transfers of tokens (asynchronously)
     * Query all transaction history. Transaction history is divided into KLAY Transfer (&#x60;KlayTransfer&#x60;), FT Transfer (&#x60;FtTransfer&#x60;), NFT Transfer (&#x60;NftTransfer&#x60;), and MT Transfer (&#x60;MtTransfer&#x60;). <p></p>  ## KlayTransfer in FT/NFT/MT transactions <p></p>  For transfers of FTs, NFTs, or MTs, &#x60;KlayTransfer&#x60; history will also be included in the query result. This is because FT/NFT/MT transfers are essentially execution of a corresponding contract function, and the response for the transfer includes &#x60;KlayTransfer&#x60;, which is equivalent to the transaction for sending KLAY. Since most transactions that execute contract functions do not usually send KLAY, the &#x60;value&#x60; of &#x60;KlayTransfer&#x60; that transfered NT, NFT, and MT may be zero. By using the &#x60;exclude-zero-klay&#x3D;true&#x60; query, &#x60;KlayTransfer&#x60; can be excluded. <p></p>  ## Transaction type<p></p>  * You can choose KLAY, FT, NFT or MT by setting &#x60;kind&#x60; parameter to get transaction history of a certain type or a combination of types.<br> * If you don&#x27;t set the &#x60;kind&#x60; parameter, all transaction types will be returned.<p></p><br>  ## Date range<p></p>  * &#x60;range&#x60; is queried in the form of &#x60;range&#x3D;{from},{to}&#x60;<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for &#x60;{to}&#x60;, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both Unix time and block number)<p></p><br>  ## Preset<p></p>  Preset is a collection of EOA and FT, NFT and MT contracts. You can use it to repetitively retrieve transaction history for certain accounts quickly and easily.<p></p>  * The parameter &#x60;presets&#x60; is a required parameter.<br> * [Preset](https://console.klaytnapi.com/en/service/th/preset/list) needs to be created on KAS Console in advance.<br> * You can check your Preset ID on KAS Console. For more information please visit [Preset](https://docs.klaytnapi.com/v/en/tutorial/th-api/th-api-token-history#preset).<p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value.<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to be used for query, Preset ID can be found on KAS Console (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified (optional)
     * @param range Set range (block number or unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true (default&#x3D;false) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransfersAsync(String xChainId, String presets, String kind, String range, Long size, String cursor, String excludeZeroKlay, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransfersValidateBeforeCall(xChainId, presets, kind, range, size, cursor, excludeZeroKlay, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransfersByEoa
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param address EOA to query (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified  (optional)
     * @param caFilter Contract addresses for FT, NFT or MT to retrieve, when selected, only the results whose &#x60;transferType&#x60; is \&quot;ft\&quot;, \&quot;nft\&quot; or \&quot;mt\&quot; and the contract address matches the values in &#x60;ca-filter&#x60;. will be returned.  (optional)
     * @param range (csv) Set query range (Block number or Unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true. (default&#x3D;false) (optional)
     * @param fromOnly If true, return transactions when sender corresponds to the given address. (default&#x3D;false) (optional)
     * @param toOnly If true, return transactions when recipient corresponds to the given address.. (default&#x3D;false) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransfersByEoaCall(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, String excludeZeroKlay, String fromOnly, String toOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/transfer/account/{address}"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (caFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ca-filter", caFilter));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (excludeZeroKlay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude-zero-klay", excludeZeroKlay));
        if (fromOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-only", fromOnly));
        if (toOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-only", toOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransfersByEoaValidateBeforeCall(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, String excludeZeroKlay, String fromOnly, String toOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTransfersByEoa(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getTransfersByEoa(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransfersByEoaCall(xChainId, address, kind, caFilter, range, size, cursor, excludeZeroKlay, fromOnly, toOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query received and sent transfers of tokens with EOA
     * Query token transaction history for a certain EOA. Functionally, it is same as &#x60;GET /v2/transfer&#x60;. If the EOA received the token, &#x60;to&#x60; is same as the EOA, and if the EOA sent the token, &#x60;from&#x60; is the same as the EOA in the returned transfer object.     Transaction history is divided into KLAY transfer (&#x60;KlayTransfer&#x60;), FT transfer (&#x60;FtTransfer&#x60;), NFT transfer (&#x60;NftTransfer&#x60;), MT transfer (&#x60;MtTransfer&#x60;). For FT, NFT, MT transfers, history of &#x60;KlayTransfer&#x60; will be included in the result. &#x60;KlayTransfer&#x60; included in FT, NFT, MT transfers may have a &#x60;value&#x60; of 0. For more details, please refer to &#x60;GET /v2/transfer&#x60;.<p></p>  ## Transaction type<p></p>  * You can set the &#x60;kind&#x60; parameter to query different types of transactions.<br> * Not setting the &#x60;kind&#x60; parameter will query all types of transactions.<p></p><br>  ## Date range<p></p>  * &#x60;range&#x60; is queried in the form of &#x60;range&#x3D;{from},{to}&#x60;<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for &#x60;{to}&#x60;, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both unix time and block number)<p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number.<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when given a 0.<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000.<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param address EOA to query (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified  (optional)
     * @param caFilter Contract addresses for FT, NFT or MT to retrieve, when selected, only the results whose &#x60;transferType&#x60; is \&quot;ft\&quot;, \&quot;nft\&quot; or \&quot;mt\&quot; and the contract address matches the values in &#x60;ca-filter&#x60;. will be returned.  (optional)
     * @param range (csv) Set query range (Block number or Unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true. (default&#x3D;false) (optional)
     * @param fromOnly If true, return transactions when sender corresponds to the given address. (default&#x3D;false) (optional)
     * @param toOnly If true, return transactions when recipient corresponds to the given address.. (default&#x3D;false) (optional)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers getTransfersByEoa(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, String excludeZeroKlay, String fromOnly, String toOnly) throws ApiException {
        ApiResponse<PageableTransfers> resp = getTransfersByEoaWithHttpInfo(xChainId, address, kind, caFilter, range, size, cursor, excludeZeroKlay, fromOnly, toOnly);
        return resp.getData();
    }

    /**
     * Query received and sent transfers of tokens with EOA
     * Query token transaction history for a certain EOA. Functionally, it is same as &#x60;GET /v2/transfer&#x60;. If the EOA received the token, &#x60;to&#x60; is same as the EOA, and if the EOA sent the token, &#x60;from&#x60; is the same as the EOA in the returned transfer object.     Transaction history is divided into KLAY transfer (&#x60;KlayTransfer&#x60;), FT transfer (&#x60;FtTransfer&#x60;), NFT transfer (&#x60;NftTransfer&#x60;), MT transfer (&#x60;MtTransfer&#x60;). For FT, NFT, MT transfers, history of &#x60;KlayTransfer&#x60; will be included in the result. &#x60;KlayTransfer&#x60; included in FT, NFT, MT transfers may have a &#x60;value&#x60; of 0. For more details, please refer to &#x60;GET /v2/transfer&#x60;.<p></p>  ## Transaction type<p></p>  * You can set the &#x60;kind&#x60; parameter to query different types of transactions.<br> * Not setting the &#x60;kind&#x60; parameter will query all types of transactions.<p></p><br>  ## Date range<p></p>  * &#x60;range&#x60; is queried in the form of &#x60;range&#x3D;{from},{to}&#x60;<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for &#x60;{to}&#x60;, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both unix time and block number)<p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number.<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when given a 0.<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000.<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param address EOA to query (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified  (optional)
     * @param caFilter Contract addresses for FT, NFT or MT to retrieve, when selected, only the results whose &#x60;transferType&#x60; is \&quot;ft\&quot;, \&quot;nft\&quot; or \&quot;mt\&quot; and the contract address matches the values in &#x60;ca-filter&#x60;. will be returned.  (optional)
     * @param range (csv) Set query range (Block number or Unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true. (default&#x3D;false) (optional)
     * @param fromOnly If true, return transactions when sender corresponds to the given address. (default&#x3D;false) (optional)
     * @param toOnly If true, return transactions when recipient corresponds to the given address.. (default&#x3D;false) (optional)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> getTransfersByEoaWithHttpInfo(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, String excludeZeroKlay, String fromOnly, String toOnly) throws ApiException {
        com.squareup.okhttp.Call call = getTransfersByEoaValidateBeforeCall(xChainId, address, kind, caFilter, range, size, cursor, excludeZeroKlay, fromOnly, toOnly, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query received and sent transfers of tokens with EOA (asynchronously)
     * Query token transaction history for a certain EOA. Functionally, it is same as &#x60;GET /v2/transfer&#x60;. If the EOA received the token, &#x60;to&#x60; is same as the EOA, and if the EOA sent the token, &#x60;from&#x60; is the same as the EOA in the returned transfer object.     Transaction history is divided into KLAY transfer (&#x60;KlayTransfer&#x60;), FT transfer (&#x60;FtTransfer&#x60;), NFT transfer (&#x60;NftTransfer&#x60;), MT transfer (&#x60;MtTransfer&#x60;). For FT, NFT, MT transfers, history of &#x60;KlayTransfer&#x60; will be included in the result. &#x60;KlayTransfer&#x60; included in FT, NFT, MT transfers may have a &#x60;value&#x60; of 0. For more details, please refer to &#x60;GET /v2/transfer&#x60;.<p></p>  ## Transaction type<p></p>  * You can set the &#x60;kind&#x60; parameter to query different types of transactions.<br> * Not setting the &#x60;kind&#x60; parameter will query all types of transactions.<p></p><br>  ## Date range<p></p>  * &#x60;range&#x60; is queried in the form of &#x60;range&#x3D;{from},{to}&#x60;<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for &#x60;{to}&#x60;, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both unix time and block number)<p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number.<br> * Uses default value (&#x60;size&#x3D;100&#x60;) when given a 0.<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000.<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param address EOA to query (required)
     * @param kind (csv) Types to include [\&quot;ft\&quot;, \&quot;nft\&quot;, \&quot;mt\&quot;], query all types when not specified  (optional)
     * @param caFilter Contract addresses for FT, NFT or MT to retrieve, when selected, only the results whose &#x60;transferType&#x60; is \&quot;ft\&quot;, \&quot;nft\&quot; or \&quot;mt\&quot; and the contract address matches the values in &#x60;ca-filter&#x60;. will be returned.  (optional)
     * @param range (csv) Set query range (Block number or Unix time) (optional)
     * @param size Number of maximum response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param excludeZeroKlay Exclude transfers of 0 KLAY if true. (default&#x3D;false) (optional)
     * @param fromOnly If true, return transactions when sender corresponds to the given address. (default&#x3D;false) (optional)
     * @param toOnly If true, return transactions when recipient corresponds to the given address.. (default&#x3D;false) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransfersByEoaAsync(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, String excludeZeroKlay, String fromOnly, String toOnly, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransfersByEoaValidateBeforeCall(xChainId, address, kind, caFilter, range, size, cursor, excludeZeroKlay, fromOnly, toOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransfersByTxHash
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransfersByTxHashCall(String xChainId, String transactionHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/transfer/tx/{transaction-hash}"
            .replaceAll("\\{" + "transaction-hash" + "\\}", apiClient.escapeString(transactionHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransfersByTxHashValidateBeforeCall(String xChainId, String transactionHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTransfersByTxHash(Async)");
        }
        // verify the required parameter 'transactionHash' is set
        if (transactionHash == null) {
            throw new ApiException("Missing the required parameter 'transactionHash' when calling getTransfersByTxHash(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransfersByTxHashCall(xChainId, transactionHash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query received and sent transfers of tokens with transaction hash
     * Get transaction history by transaction hash. Transaction history is divided into KLAY transfer (&#x60;KlayTransfer&#x60;), FT transfer (&#x60;FtTransfer&#x60;), NFT transfer (&#x60;NftTransfer&#x60;), MT transfer (&#x60;MtTransfer&#x60;). For FT, NFT, MT transfers, history of &#x60;KlayTransfer&#x60; will be included in the result. &#x60;KlayTransfer&#x60; included in FT, NFT, MT transfers may have a &#x60;value&#x60; of 0. For more details, please refer to &#x60;GET /v2/transfer&#x60;. 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to query (required)
     * @return Transfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transfers getTransfersByTxHash(String xChainId, String transactionHash) throws ApiException {
        ApiResponse<Transfers> resp = getTransfersByTxHashWithHttpInfo(xChainId, transactionHash);
        return resp.getData();
    }

    /**
     * Query received and sent transfers of tokens with transaction hash
     * Get transaction history by transaction hash. Transaction history is divided into KLAY transfer (&#x60;KlayTransfer&#x60;), FT transfer (&#x60;FtTransfer&#x60;), NFT transfer (&#x60;NftTransfer&#x60;), MT transfer (&#x60;MtTransfer&#x60;). For FT, NFT, MT transfers, history of &#x60;KlayTransfer&#x60; will be included in the result. &#x60;KlayTransfer&#x60; included in FT, NFT, MT transfers may have a &#x60;value&#x60; of 0. For more details, please refer to &#x60;GET /v2/transfer&#x60;. 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to query (required)
     * @return ApiResponse&lt;Transfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transfers> getTransfersByTxHashWithHttpInfo(String xChainId, String transactionHash) throws ApiException {
        com.squareup.okhttp.Call call = getTransfersByTxHashValidateBeforeCall(xChainId, transactionHash, null, null);
        Type localVarReturnType = new TypeToken<Transfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query received and sent transfers of tokens with transaction hash (asynchronously)
     * Get transaction history by transaction hash. Transaction history is divided into KLAY transfer (&#x60;KlayTransfer&#x60;), FT transfer (&#x60;FtTransfer&#x60;), NFT transfer (&#x60;NftTransfer&#x60;), MT transfer (&#x60;MtTransfer&#x60;). For FT, NFT, MT transfers, history of &#x60;KlayTransfer&#x60; will be included in the result. &#x60;KlayTransfer&#x60; included in FT, NFT, MT transfers may have a &#x60;value&#x60; of 0. For more details, please refer to &#x60;GET /v2/transfer&#x60;. 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransfersByTxHashAsync(String xChainId, String transactionHash, final ApiCallback<Transfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransfersByTxHashValidateBeforeCall(xChainId, transactionHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
