/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.MtToken;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.Nft;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.PageableMtTokens;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.PageableMtTokensWithBalance;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.PageableMts;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.PageableNfts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenApi {
    private ApiClient apiClient;

    public TokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getMtTokensByContractAddressAndOwnerAddress
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMtTokensByContractAddressAndOwnerAddressCall(String xChainId, String mtAddress, String ownerAddress, String cursor, Long size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/mt/{mt-address}/owner/{owner-address}"
            .replaceAll("\\{" + "mt-address" + "\\}", apiClient.escapeString(mtAddress.toString()))
            .replaceAll("\\{" + "owner-address" + "\\}", apiClient.escapeString(ownerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMtTokensByContractAddressAndOwnerAddressValidateBeforeCall(String xChainId, String mtAddress, String ownerAddress, String cursor, Long size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getMtTokensByContractAddressAndOwnerAddress(Async)");
        }
        // verify the required parameter 'mtAddress' is set
        if (mtAddress == null) {
            throw new ApiException("Missing the required parameter 'mtAddress' when calling getMtTokensByContractAddressAndOwnerAddress(Async)");
        }
        // verify the required parameter 'ownerAddress' is set
        if (ownerAddress == null) {
            throw new ApiException("Missing the required parameter 'ownerAddress' when calling getMtTokensByContractAddressAndOwnerAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndOwnerAddressCall(xChainId, mtAddress, ownerAddress, cursor, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get token data for MT data by EOA
     * Selecting an MT contract and an EOA will fetch data of MTs by EOA created by MT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @return PageableMtTokensWithBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableMtTokensWithBalance getMtTokensByContractAddressAndOwnerAddress(String xChainId, String mtAddress, String ownerAddress, String cursor, Long size) throws ApiException {
        ApiResponse<PageableMtTokensWithBalance> resp = getMtTokensByContractAddressAndOwnerAddressWithHttpInfo(xChainId, mtAddress, ownerAddress, cursor, size);
        return resp.getData();
    }

    /**
     * Get token data for MT data by EOA
     * Selecting an MT contract and an EOA will fetch data of MTs by EOA created by MT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @return ApiResponse&lt;PageableMtTokensWithBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableMtTokensWithBalance> getMtTokensByContractAddressAndOwnerAddressWithHttpInfo(String xChainId, String mtAddress, String ownerAddress, String cursor, Long size) throws ApiException {
        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndOwnerAddressValidateBeforeCall(xChainId, mtAddress, ownerAddress, cursor, size, null, null);
        Type localVarReturnType = new TypeToken<PageableMtTokensWithBalance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get token data for MT data by EOA (asynchronously)
     * Selecting an MT contract and an EOA will fetch data of MTs by EOA created by MT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMtTokensByContractAddressAndOwnerAddressAsync(String xChainId, String mtAddress, String ownerAddress, String cursor, Long size, final ApiCallback<PageableMtTokensWithBalance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndOwnerAddressValidateBeforeCall(xChainId, mtAddress, ownerAddress, cursor, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableMtTokensWithBalance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMtTokensByContractAddressAndOwnerAddressAndTokenId
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMtTokensByContractAddressAndOwnerAddressAndTokenIdCall(String xChainId, String mtAddress, String ownerAddress, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/mt/{mt-address}/owner/{owner-address}/token/{token-id}"
            .replaceAll("\\{" + "mt-address" + "\\}", apiClient.escapeString(mtAddress.toString()))
            .replaceAll("\\{" + "owner-address" + "\\}", apiClient.escapeString(ownerAddress.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMtTokensByContractAddressAndOwnerAddressAndTokenIdValidateBeforeCall(String xChainId, String mtAddress, String ownerAddress, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getMtTokensByContractAddressAndOwnerAddressAndTokenId(Async)");
        }
        // verify the required parameter 'mtAddress' is set
        if (mtAddress == null) {
            throw new ApiException("Missing the required parameter 'mtAddress' when calling getMtTokensByContractAddressAndOwnerAddressAndTokenId(Async)");
        }
        // verify the required parameter 'ownerAddress' is set
        if (ownerAddress == null) {
            throw new ApiException("Missing the required parameter 'ownerAddress' when calling getMtTokensByContractAddressAndOwnerAddressAndTokenId(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getMtTokensByContractAddressAndOwnerAddressAndTokenId(Async)");
        }
        
        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndOwnerAddressAndTokenIdCall(xChainId, mtAddress, ownerAddress, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get data of MT contracts for certain EOAs
     * Query data of certain MTs.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @return MtToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MtToken getMtTokensByContractAddressAndOwnerAddressAndTokenId(String xChainId, String mtAddress, String ownerAddress, String tokenId) throws ApiException {
        ApiResponse<MtToken> resp = getMtTokensByContractAddressAndOwnerAddressAndTokenIdWithHttpInfo(xChainId, mtAddress, ownerAddress, tokenId);
        return resp.getData();
    }

    /**
     * Get data of MT contracts for certain EOAs
     * Query data of certain MTs.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @return ApiResponse&lt;MtToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MtToken> getMtTokensByContractAddressAndOwnerAddressAndTokenIdWithHttpInfo(String xChainId, String mtAddress, String ownerAddress, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndOwnerAddressAndTokenIdValidateBeforeCall(xChainId, mtAddress, ownerAddress, tokenId, null, null);
        Type localVarReturnType = new TypeToken<MtToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get data of MT contracts for certain EOAs (asynchronously)
     * Query data of certain MTs.
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMtTokensByContractAddressAndOwnerAddressAndTokenIdAsync(String xChainId, String mtAddress, String ownerAddress, String tokenId, final ApiCallback<MtToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndOwnerAddressAndTokenIdValidateBeforeCall(xChainId, mtAddress, ownerAddress, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MtToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMtTokensByContractAddressAndTokenId
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMtTokensByContractAddressAndTokenIdCall(String xChainId, String mtAddress, String tokenId, String cursor, Long size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/mt/{mt-address}/token/{token-id}"
            .replaceAll("\\{" + "mt-address" + "\\}", apiClient.escapeString(mtAddress.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMtTokensByContractAddressAndTokenIdValidateBeforeCall(String xChainId, String mtAddress, String tokenId, String cursor, Long size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getMtTokensByContractAddressAndTokenId(Async)");
        }
        // verify the required parameter 'mtAddress' is set
        if (mtAddress == null) {
            throw new ApiException("Missing the required parameter 'mtAddress' when calling getMtTokensByContractAddressAndTokenId(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getMtTokensByContractAddressAndTokenId(Async)");
        }
        
        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndTokenIdCall(xChainId, mtAddress, tokenId, cursor, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query list of all owners for certain MTs
     * Selecting an MT contract and a token ID will  data of the EOA that owns the tokens.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @return PageableMtTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableMtTokens getMtTokensByContractAddressAndTokenId(String xChainId, String mtAddress, String tokenId, String cursor, Long size) throws ApiException {
        ApiResponse<PageableMtTokens> resp = getMtTokensByContractAddressAndTokenIdWithHttpInfo(xChainId, mtAddress, tokenId, cursor, size);
        return resp.getData();
    }

    /**
     * Query list of all owners for certain MTs
     * Selecting an MT contract and a token ID will  data of the EOA that owns the tokens.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @return ApiResponse&lt;PageableMtTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableMtTokens> getMtTokensByContractAddressAndTokenIdWithHttpInfo(String xChainId, String mtAddress, String tokenId, String cursor, Long size) throws ApiException {
        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndTokenIdValidateBeforeCall(xChainId, mtAddress, tokenId, cursor, size, null, null);
        Type localVarReturnType = new TypeToken<PageableMtTokens>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query list of all owners for certain MTs (asynchronously)
     * Selecting an MT contract and a token ID will  data of the EOA that owns the tokens.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param tokenId MT ID to query (in hexadecimal) (required)
     * @param cursor Offset for specifying a certain position (optional)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMtTokensByContractAddressAndTokenIdAsync(String xChainId, String mtAddress, String tokenId, String cursor, Long size, final ApiCallback<PageableMtTokens> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMtTokensByContractAddressAndTokenIdValidateBeforeCall(xChainId, mtAddress, tokenId, cursor, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableMtTokens>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMtsByContractAddress
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMtsByContractAddressCall(String xChainId, String mtAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/mt/{mt-address}/token"
            .replaceAll("\\{" + "mt-address" + "\\}", apiClient.escapeString(mtAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMtsByContractAddressValidateBeforeCall(String xChainId, String mtAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getMtsByContractAddress(Async)");
        }
        // verify the required parameter 'mtAddress' is set
        if (mtAddress == null) {
            throw new ApiException("Missing the required parameter 'mtAddress' when calling getMtsByContractAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = getMtsByContractAddressCall(xChainId, mtAddress, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query data of all tokens for certain MT contracts
     * Selecting an MT contract will fetch all data of tokens issued by the contract.<p></p>  ## Sort<p></p>  * The items in the response will be listed in lexicographical order of the token IDs. <p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @return PageableMts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableMts getMtsByContractAddress(String xChainId, String mtAddress, Long size, String cursor) throws ApiException {
        ApiResponse<PageableMts> resp = getMtsByContractAddressWithHttpInfo(xChainId, mtAddress, size, cursor);
        return resp.getData();
    }

    /**
     * Query data of all tokens for certain MT contracts
     * Selecting an MT contract will fetch all data of tokens issued by the contract.<p></p>  ## Sort<p></p>  * The items in the response will be listed in lexicographical order of the token IDs. <p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @return ApiResponse&lt;PageableMts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableMts> getMtsByContractAddressWithHttpInfo(String xChainId, String mtAddress, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getMtsByContractAddressValidateBeforeCall(xChainId, mtAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableMts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query data of all tokens for certain MT contracts (asynchronously)
     * Selecting an MT contract will fetch all data of tokens issued by the contract.<p></p>  ## Sort<p></p>  * The items in the response will be listed in lexicographical order of the token IDs. <p></p><br>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param mtAddress NFT Contract address to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMtsByContractAddressAsync(String xChainId, String mtAddress, Long size, String cursor, final ApiCallback<PageableMts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMtsByContractAddressValidateBeforeCall(xChainId, mtAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableMts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNftById
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress NFT Contract address to query (required)
     * @param tokenId NFT ID to query (in hexadecimal) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNftByIdCall(String xChainId, String nftAddress, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nft-address}/token/{token-id}"
            .replaceAll("\\{" + "nft-address" + "\\}", apiClient.escapeString(nftAddress.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNftByIdValidateBeforeCall(String xChainId, String nftAddress, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getNftById(Async)");
        }
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling getNftById(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getNftById(Async)");
        }
        
        com.squareup.okhttp.Call call = getNftByIdCall(xChainId, nftAddress, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query token data for certain NFTs
     * Fetch data for certain NFTs 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress NFT Contract address to query (required)
     * @param tokenId NFT ID to query (in hexadecimal) (required)
     * @return Nft
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Nft getNftById(String xChainId, String nftAddress, String tokenId) throws ApiException {
        ApiResponse<Nft> resp = getNftByIdWithHttpInfo(xChainId, nftAddress, tokenId);
        return resp.getData();
    }

    /**
     * Query token data for certain NFTs
     * Fetch data for certain NFTs 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress NFT Contract address to query (required)
     * @param tokenId NFT ID to query (in hexadecimal) (required)
     * @return ApiResponse&lt;Nft&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Nft> getNftByIdWithHttpInfo(String xChainId, String nftAddress, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = getNftByIdValidateBeforeCall(xChainId, nftAddress, tokenId, null, null);
        Type localVarReturnType = new TypeToken<Nft>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query token data for certain NFTs (asynchronously)
     * Fetch data for certain NFTs 
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress NFT Contract address to query (required)
     * @param tokenId NFT ID to query (in hexadecimal) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNftByIdAsync(String xChainId, String nftAddress, String tokenId, final ApiCallback<Nft> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNftByIdValidateBeforeCall(xChainId, nftAddress, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Nft>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNftsByContractAddress
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNftsByContractAddressCall(String xChainId, String nftAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nft-address}/token"
            .replaceAll("\\{" + "nft-address" + "\\}", apiClient.escapeString(nftAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNftsByContractAddressValidateBeforeCall(String xChainId, String nftAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getNftsByContractAddress(Async)");
        }
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling getNftsByContractAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = getNftsByContractAddressCall(xChainId, nftAddress, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query all token data for certain NFT contracts
     * Selecting an NFT contract will fetch data of all NFTs created by this NFT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @return PageableNfts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableNfts getNftsByContractAddress(String xChainId, String nftAddress, Long size, String cursor) throws ApiException {
        ApiResponse<PageableNfts> resp = getNftsByContractAddressWithHttpInfo(xChainId, nftAddress, size, cursor);
        return resp.getData();
    }

    /**
     * Query all token data for certain NFT contracts
     * Selecting an NFT contract will fetch data of all NFTs created by this NFT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @return ApiResponse&lt;PageableNfts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableNfts> getNftsByContractAddressWithHttpInfo(String xChainId, String nftAddress, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getNftsByContractAddressValidateBeforeCall(xChainId, nftAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query all token data for certain NFT contracts (asynchronously)
     * Selecting an NFT contract will fetch data of all NFTs created by this NFT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNftsByContractAddressAsync(String xChainId, String nftAddress, Long size, String cursor, final ApiCallback<PageableNfts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNftsByContractAddressValidateBeforeCall(xChainId, nftAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNftsByOwnerAddress
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNftsByOwnerAddressCall(String xChainId, String nftAddress, String ownerAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nft-address}/owner/{owner-address}"
            .replaceAll("\\{" + "nft-address" + "\\}", apiClient.escapeString(nftAddress.toString()))
            .replaceAll("\\{" + "owner-address" + "\\}", apiClient.escapeString(ownerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNftsByOwnerAddressValidateBeforeCall(String xChainId, String nftAddress, String ownerAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getNftsByOwnerAddress(Async)");
        }
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling getNftsByOwnerAddress(Async)");
        }
        // verify the required parameter 'ownerAddress' is set
        if (ownerAddress == null) {
            throw new ApiException("Missing the required parameter 'ownerAddress' when calling getNftsByOwnerAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = getNftsByOwnerAddressCall(xChainId, nftAddress, ownerAddress, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get token data for NFT data by EOA
     * Selecting an NFT contract and an EOA will fetch data of the NFTs by EOA created by the NFT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @return PageableNfts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableNfts getNftsByOwnerAddress(String xChainId, String nftAddress, String ownerAddress, Long size, String cursor) throws ApiException {
        ApiResponse<PageableNfts> resp = getNftsByOwnerAddressWithHttpInfo(xChainId, nftAddress, ownerAddress, size, cursor);
        return resp.getData();
    }

    /**
     * Get token data for NFT data by EOA
     * Selecting an NFT contract and an EOA will fetch data of the NFTs by EOA created by the NFT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @return ApiResponse&lt;PageableNfts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableNfts> getNftsByOwnerAddressWithHttpInfo(String xChainId, String nftAddress, String ownerAddress, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getNftsByOwnerAddressValidateBeforeCall(xChainId, nftAddress, ownerAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get token data for NFT data by EOA (asynchronously)
     * Selecting an NFT contract and an EOA will fetch data of the NFTs by EOA created by the NFT contract.<p></p>  ## Size<p></p>  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)<br> * Returns an error when given a negative number<br> * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0<br> * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000<br>
     * @param xChainId Klaytn Network Chain ID (1001 or 8217) (required)
     * @param nftAddress Contract address to query (required)
     * @param ownerAddress EOA to query (required)
     * @param size Number of response items (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Offset for specifying a certain position (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNftsByOwnerAddressAsync(String xChainId, String nftAddress, String ownerAddress, Long size, String cursor, final ApiCallback<PageableNfts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNftsByOwnerAddressValidateBeforeCall(xChainId, nftAddress, ownerAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
