/*
 * Wallet API
 * # Introduction Wallet API is an API for creating and managing Klaytn accounts as well as sending transactions. If you create your Klaytn account using Wallet API, you don't have to manage your private key yourself. Wallet API provides a wallet for safe storage of your Klaytn account private keys that you would need to use BApps. For more details on how to use Wallet API, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  Wallet API can be divided into the Account part, which creates and manages Klaytn accounts, and the Transaction part, which sends different kinds of transactions.  Wallet API creates, deletes and monitors Klaytn accounts and updates the accounts to multisig, and manages all private keys for all accounts registered on KAS.  Wallet API can also create transaction to send it to Klaytn. These include transactions sent from multisig accounts. In case of muiltisig accounts, a transaction will automatically be sent to Klaytn once \\(Threshold\\) is met. For more detail, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  There are mainly two types of transactions: basic transactions and fee delegation transactions. Fee delegation transactions include Global Fee Delegation transaction and user fee deletation transaction. With the Global Fee Delegation transaction scheme, the transaction fee will initially be paid by GroundX and then be charged to you at a later date. With the User Fee Delegation transaction scheme, you create an account that pays the transaction fees on behalf of the users when a transaction.  The functionalities and limits of Wallet API are shown below:  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | Limits | Supports Cypress(Mainnet), Baobab(Testnet) \\ Doesn't support (Service Chain \\) | |  |  | Doesn't support account management for external custodial keys | |  |  | Doesn't support multisig for RLP encoded transactions | |  | Account management | Create, retrieve and delete account | |  |  | Multisig account update | |  | Managing transaction | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) creating and sending transaction | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) creating and sending transaction | |  |  | RLP encoded transaction\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) creating and sending | |  |  | Managing and sending multisig transactions | |  | Administrator | Manage resource pool\\(create, query pool, delete, retrieve account \\) | 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.wallet.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Result fee delegation transactions and KLAY converted into different currencies based on the rates at the time of sending the transaction.
 */
@Schema(description = "Result fee delegation transactions and KLAY converted into different currencies based on the rates at the time of sending the transaction.")

public class FDTransactionWithCurrencyResult {
  @SerializedName("chainId")
  private BigDecimal chainId = null;

  @SerializedName("chargedByKlay")
  private String chargedByKlay = null;

  @SerializedName("chargedByKrw")
  private String chargedByKrw = null;

  @SerializedName("chargedByPeb")
  private String chargedByPeb = null;

  @SerializedName("chargedByUsd")
  private String chargedByUsd = null;

  @SerializedName("feePayer")
  private String feePayer = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("gasPrice")
  private String gasPrice = null;

  @SerializedName("gasUsed")
  private String gasUsed = null;

  @SerializedName("krw")
  private BigDecimal krw = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("timestamp")
  private BigDecimal timestamp = null;

  @SerializedName("transactionHash")
  private String transactionHash = null;

  @SerializedName("typeInt")
  private BigDecimal typeInt = null;

  @SerializedName("usd")
  private BigDecimal usd = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("feeRatio")
  private String feeRatio = null;

  public FDTransactionWithCurrencyResult chainId(BigDecimal chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * Get chainId
   * @return chainId
  **/
  @Schema(required = true, description = "")
  public BigDecimal getChainId() {
    return chainId;
  }

  public void setChainId(BigDecimal chainId) {
    this.chainId = chainId;
  }

  public FDTransactionWithCurrencyResult chargedByKlay(String chargedByKlay) {
    this.chargedByKlay = chargedByKlay;
    return this;
  }

   /**
   * Fee delegation cost in KLAY
   * @return chargedByKlay
  **/
  @Schema(required = true, description = "Fee delegation cost in KLAY")
  public String getChargedByKlay() {
    return chargedByKlay;
  }

  public void setChargedByKlay(String chargedByKlay) {
    this.chargedByKlay = chargedByKlay;
  }

  public FDTransactionWithCurrencyResult chargedByKrw(String chargedByKrw) {
    this.chargedByKrw = chargedByKrw;
    return this;
  }

   /**
   * Fee delegation cost in KRW
   * @return chargedByKrw
  **/
  @Schema(required = true, description = "Fee delegation cost in KRW")
  public String getChargedByKrw() {
    return chargedByKrw;
  }

  public void setChargedByKrw(String chargedByKrw) {
    this.chargedByKrw = chargedByKrw;
  }

  public FDTransactionWithCurrencyResult chargedByPeb(String chargedByPeb) {
    this.chargedByPeb = chargedByPeb;
    return this;
  }

   /**
   * Fee delegation cost in Peb
   * @return chargedByPeb
  **/
  @Schema(required = true, description = "Fee delegation cost in Peb")
  public String getChargedByPeb() {
    return chargedByPeb;
  }

  public void setChargedByPeb(String chargedByPeb) {
    this.chargedByPeb = chargedByPeb;
  }

  public FDTransactionWithCurrencyResult chargedByUsd(String chargedByUsd) {
    this.chargedByUsd = chargedByUsd;
    return this;
  }

   /**
   * Fee delegation cost in USD
   * @return chargedByUsd
  **/
  @Schema(required = true, description = "Fee delegation cost in USD")
  public String getChargedByUsd() {
    return chargedByUsd;
  }

  public void setChargedByUsd(String chargedByUsd) {
    this.chargedByUsd = chargedByUsd;
  }

  public FDTransactionWithCurrencyResult feePayer(String feePayer) {
    this.feePayer = feePayer;
    return this;
  }

   /**
   * FeePayer&#x27;s Klaytn account address
   * @return feePayer
  **/
  @Schema(required = true, description = "FeePayer's Klaytn account address")
  public String getFeePayer() {
    return feePayer;
  }

  public void setFeePayer(String feePayer) {
    this.feePayer = feePayer;
  }

  public FDTransactionWithCurrencyResult from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Transaction sender&#x27;s Klaytn account address
   * @return from
  **/
  @Schema(required = true, description = "Transaction sender's Klaytn account address")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public FDTransactionWithCurrencyResult gasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * The cost of gas used for sending the transaction
   * @return gasPrice
  **/
  @Schema(required = true, description = "The cost of gas used for sending the transaction")
  public String getGasPrice() {
    return gasPrice;
  }

  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }

  public FDTransactionWithCurrencyResult gasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

   /**
   * Amount of gas used for sending the transaction
   * @return gasUsed
  **/
  @Schema(required = true, description = "Amount of gas used for sending the transaction")
  public String getGasUsed() {
    return gasUsed;
  }

  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }

  public FDTransactionWithCurrencyResult krw(BigDecimal krw) {
    this.krw = krw;
    return this;
  }

   /**
   * KLAY/KRW rate at the time of sending the transaction (previous close)
   * @return krw
  **/
  @Schema(required = true, description = "KLAY/KRW rate at the time of sending the transaction (previous close)")
  public BigDecimal getKrw() {
    return krw;
  }

  public void setKrw(BigDecimal krw) {
    this.krw = krw;
  }

  public FDTransactionWithCurrencyResult status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Transaction status
   * @return status
  **/
  @Schema(required = true, description = "Transaction status")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public FDTransactionWithCurrencyResult timestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp of when the transaction was processed (in sec.)
   * @return timestamp
  **/
  @Schema(required = true, description = "Timestamp of when the transaction was processed (in sec.)")
  public BigDecimal getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
  }

  public FDTransactionWithCurrencyResult transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Transaction hash
   * @return transactionHash
  **/
  @Schema(required = true, description = "Transaction hash")
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }

  public FDTransactionWithCurrencyResult typeInt(BigDecimal typeInt) {
    this.typeInt = typeInt;
    return this;
  }

   /**
   * The number to indicate the transaction type. For more details on transaction types, refer to [link](https://docs.klaytn.com/klaytn/design/transactions).
   * @return typeInt
  **/
  @Schema(required = true, description = "The number to indicate the transaction type. For more details on transaction types, refer to [link](https://docs.klaytn.com/klaytn/design/transactions).")
  public BigDecimal getTypeInt() {
    return typeInt;
  }

  public void setTypeInt(BigDecimal typeInt) {
    this.typeInt = typeInt;
  }

  public FDTransactionWithCurrencyResult usd(BigDecimal usd) {
    this.usd = usd;
    return this;
  }

   /**
   * KLAY/USD rate at the time of sending the transaction (previous close)
   * @return usd
  **/
  @Schema(required = true, description = "KLAY/USD rate at the time of sending the transaction (previous close)")
  public BigDecimal getUsd() {
    return usd;
  }

  public void setUsd(BigDecimal usd) {
    this.usd = usd;
  }

  public FDTransactionWithCurrencyResult to(String to) {
    this.to = to;
    return this;
  }

   /**
   * KLAY recipient&#x27;s Klaytn account address or contract address
   * @return to
  **/
  @Schema(description = "KLAY recipient's Klaytn account address or contract address")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public FDTransactionWithCurrencyResult feeRatio(String feeRatio) {
    this.feeRatio = feeRatio;
    return this;
  }

   /**
   * The ratio of fee paid by FeePayer from the total transaction fee. If the FeePayer pays all, this field can be left blank.
   * @return feeRatio
  **/
  @Schema(description = "The ratio of fee paid by FeePayer from the total transaction fee. If the FeePayer pays all, this field can be left blank.")
  public String getFeeRatio() {
    return feeRatio;
  }

  public void setFeeRatio(String feeRatio) {
    this.feeRatio = feeRatio;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FDTransactionWithCurrencyResult fdTransactionWithCurrencyResult = (FDTransactionWithCurrencyResult) o;
    return Objects.equals(this.chainId, fdTransactionWithCurrencyResult.chainId) &&
        Objects.equals(this.chargedByKlay, fdTransactionWithCurrencyResult.chargedByKlay) &&
        Objects.equals(this.chargedByKrw, fdTransactionWithCurrencyResult.chargedByKrw) &&
        Objects.equals(this.chargedByPeb, fdTransactionWithCurrencyResult.chargedByPeb) &&
        Objects.equals(this.chargedByUsd, fdTransactionWithCurrencyResult.chargedByUsd) &&
        Objects.equals(this.feePayer, fdTransactionWithCurrencyResult.feePayer) &&
        Objects.equals(this.from, fdTransactionWithCurrencyResult.from) &&
        Objects.equals(this.gasPrice, fdTransactionWithCurrencyResult.gasPrice) &&
        Objects.equals(this.gasUsed, fdTransactionWithCurrencyResult.gasUsed) &&
        Objects.equals(this.krw, fdTransactionWithCurrencyResult.krw) &&
        Objects.equals(this.status, fdTransactionWithCurrencyResult.status) &&
        Objects.equals(this.timestamp, fdTransactionWithCurrencyResult.timestamp) &&
        Objects.equals(this.transactionHash, fdTransactionWithCurrencyResult.transactionHash) &&
        Objects.equals(this.typeInt, fdTransactionWithCurrencyResult.typeInt) &&
        Objects.equals(this.usd, fdTransactionWithCurrencyResult.usd) &&
        Objects.equals(this.to, fdTransactionWithCurrencyResult.to) &&
        Objects.equals(this.feeRatio, fdTransactionWithCurrencyResult.feeRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chainId, chargedByKlay, chargedByKrw, chargedByPeb, chargedByUsd, feePayer, from, gasPrice, gasUsed, krw, status, timestamp, transactionHash, typeInt, usd, to, feeRatio);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FDTransactionWithCurrencyResult {\n");
    
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    chargedByKlay: ").append(toIndentedString(chargedByKlay)).append("\n");
    sb.append("    chargedByKrw: ").append(toIndentedString(chargedByKrw)).append("\n");
    sb.append("    chargedByPeb: ").append(toIndentedString(chargedByPeb)).append("\n");
    sb.append("    chargedByUsd: ").append(toIndentedString(chargedByUsd)).append("\n");
    sb.append("    feePayer: ").append(toIndentedString(feePayer)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    krw: ").append(toIndentedString(krw)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    typeInt: ").append(toIndentedString(typeInt)).append("\n");
    sb.append("    usd: ").append(toIndentedString(usd)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    feeRatio: ").append(toIndentedString(feeRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
